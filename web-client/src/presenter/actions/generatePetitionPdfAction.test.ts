import { PETITION_TYPES } from '@shared/business/entities/EntityConstants';
import { applicationContextForClient as applicationContext } from '@web-client/test/createClientTestApplicationContext';
import { generatePetitionPdfAction } from '@web-client/presenter/actions/generatePetitionPdfAction';
import { presenter } from '../presenter-mock';
import { runAction } from '@web-client/presenter/test.cerebral';

describe('generatePetitionPdfAction', () => {
  let generatePetitionPdfInteractorCalls;
  beforeEach(() => {
    generatePetitionPdfInteractorCalls = [];
    applicationContext
      .getUseCases()
      .generatePetitionPdfInteractor.mockImplementation((_, params) => {
        generatePetitionPdfInteractorCalls.push(
          JSON.parse(JSON.stringify(params)),
        );
        return new Promise(resolve =>
          resolve({
            fileId: 'TEST_FILE_ID',
            url: 'TEST_URL',
          }),
        );
      });

    presenter.providers.applicationContext = applicationContext;
  });

  it('should not return/do anything if petition is not auto generated', async () => {
    const results = await runAction(generatePetitionPdfAction, {
      modules: {
        presenter,
      },
      state: {
        petitionFormatted: {
          petitionType: 'NOT AUTO GENERATED',
        },
      },
    });

    expect(generatePetitionPdfInteractorCalls.length).toEqual(0);

    expect(results.output).toEqual(undefined);
  });

  it('should generate the petition and save id in state when petition is auto generated', async () => {
    const results = await runAction(generatePetitionPdfAction, {
      modules: {
        presenter,
      },
      state: {
        petitionFormatted: {
          petitionFileId: undefined,
          petitionProp: 'TEST_PROP',
          petitionType: PETITION_TYPES.autoGenerated,
        },
      },
    });

    expect(generatePetitionPdfInteractorCalls.length).toEqual(1);
    expect(generatePetitionPdfInteractorCalls[0]).toEqual({
      petitionFileId: undefined,
      petitionProp: 'TEST_PROP',
      petitionType: 'autoGenerated',
    });

    expect(results.state.petitionFormatted.petitionFileId).toEqual(
      'TEST_FILE_ID',
    );
  });
});
