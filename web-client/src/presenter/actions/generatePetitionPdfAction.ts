import { FORMATS } from '@shared/business/utilities/DateHandler';
import { PETITION_TYPES } from '@web-client/presenter/actions/setupPetitionStateAction';
import { getCaseCaptionMeta } from '@shared/business/utilities/getCaseCaptionMeta';

export const generatePetitionPdfAction = async ({
  applicationContext,
  props,
}: ActionProps) => {
  const { petitionType } = props.step1Data;

  if (petitionType === PETITION_TYPES.autoGenerated) {
    const petitionInfo = {
      ...props.step1Data,
      ...props.step2Data,
      ...props.step3Data,
      ...props.step4Data,
      ...props.step5Data,
    };

    const caseCaption =
      applicationContext
        .getUtilities()
        .getCaseCaption({ ...petitionInfo, petitioners: [] }) || '';

    const { caseCaptionExtension, caseTitle } = getCaseCaptionMeta({
      caseCaption,
    });

    const {
      caseType,
      contactPrimary,
      contactSecondary,
      irsNotices,
      partyType,
      petitionFacts,
      petitionReasons,
      preferredTrialCity,
      procedureType,
    } = petitionInfo;

    // This will either be duplicated when we actually create the case, or it should be moved
    const user = applicationContext.getCurrentUser();
    contactPrimary.email = user.email;

    let noticeIssuedDate;
    let taxYear;

    if (irsNotices[0]) {
      noticeIssuedDate = applicationContext
        .getUtilities()
        .formatDateString(irsNotices[0].noticeIssuedDate, FORMATS.MMDDYY);

      ({ taxYear } = irsNotices[0]);
    }

    const { url } = await applicationContext
      .getUseCases()
      .generatePetitionPdfInteractor(applicationContext, {
        caseCaptionExtension,
        caseTitle,
        caseType,
        contactPrimary,
        contactSecondary,
        noticeIssuedDate,
        partyType,
        petitionFacts,
        petitionReasons,
        preferredTrialCity,
        procedureType,
        taxYear,
      });

    return { pdfUrl: url };
  }
};
