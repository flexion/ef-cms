{
  "service": {
    "service": "ef-cms-users",
    "serviceObject": {
      "name": "ef-cms-users"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "tracing": true,
      "region": "us-east-1",
      "runtime": "nodejs10.x",
      "memorySize": 768,
      "timeout": 30,
      "logRetentionInDays": 7,
      "s3Endpoint": "s3.us-east-1.amazonaws.com",
      "dynamodbEndpoint": "dynamodb.us-east-1.amazonaws.com",
      "masterRegion": "us-east-1",
      "userPoolId": "us-east-1_7uRkF0Axn",
      "masterDynamodbEndpoint": "dynamodb.us-east-1.amazonaws.com",
      "clamavDefDir": "/opt/var/lib/clamav",
      "deploymentBucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
      "apiGateway": {
        "binaryMediaTypes": [
          "application/pdf"
        ]
      },
      "environment": {
        "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
        "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
        "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
        "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
        "MASTER_REGION": "us-east-1",
        "STAGE": "dev",
        "USER_POOL_ID": "us-east-1_7uRkF0Axn",
        "NODE_ENV": "production",
        "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
        "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:us-east-1:515554424717:function:ef-cms-users-dev-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:AdminCreateUser",
            "cognito-idp:AdminGetUser"
          ],
          "Resource": [
            "arn:aws:cognito-idp:us-east-1:515554424717:userpool/us-east-1_7uRkF0Axn"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:*"
          ],
          "Resource": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                "/*"
              ]
            ]
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:BatchGetItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchWriteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:515554424717:table/efcms-dev",
            "arn:aws:dynamodb:us-east-1:515554424717:table/efcms-dev/index/*",
            "arn:aws:dynamodb:us-east-1:515554424717:table/efcms-dev",
            "arn:aws:dynamodb:us-east-1:515554424717:table/efcms-dev/index/*"
          ]
        }
      ],
      "deploymentBucketObject": {
        "name": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
        "serverSideEncryption": "AES256"
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getUser",
              "RetentionInDays": 7
            }
          },
          "GetInternalUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getInternalUsers",
              "RetentionInDays": 7
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-createUser",
              "RetentionInDays": 7
            }
          },
          "GetCasesByUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getCasesByUser",
              "RetentionInDays": 7
            }
          },
          "VerifyCaseForUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-verifyCaseForUser",
              "RetentionInDays": 7
            }
          },
          "VerifyPendingCaseForUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-verifyPendingCaseForUser",
              "RetentionInDays": 7
            }
          },
          "PractitionerCaseAssociationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-practitionerCaseAssociation",
              "RetentionInDays": 7
            }
          },
          "PractitionerPendingCaseAssociationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-practitionerPendingCaseAssociation",
              "RetentionInDays": 7
            }
          },
          "GetInboxMessagesForUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getInboxMessagesForUser",
              "RetentionInDays": 7
            }
          },
          "GetSentMessagesForUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getSentMessagesForUser",
              "RetentionInDays": 7
            }
          },
          "GetDocumentQCInboxForUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getDocumentQCInboxForUser",
              "RetentionInDays": 7
            }
          },
          "GetDocumentQCBatchedForUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getDocumentQCBatchedForUser",
              "RetentionInDays": 7
            }
          },
          "GetDocumentQCServedForUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getDocumentQCServedForUser",
              "RetentionInDays": 7
            }
          },
          "UpdateUserContactInformationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-updateUserContactInformation",
              "RetentionInDays": 7
            }
          },
          "GetPractitionersBySearchKeyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getPractitionersBySearchKey",
              "RetentionInDays": 7
            }
          },
          "GetRespondentsBySearchKeyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ef-cms-users-dev-getRespondentsBySearchKey",
              "RetentionInDays": 7
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "ef-cms-users",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ef-cms-users-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ef-cms-users-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": [
                          "arn:aws:lambda:us-east-1:515554424717:function:ef-cms-users-dev-*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cognito-idp:AdminCreateUser",
                          "cognito-idp:AdminGetUser"
                        ],
                        "Resource": [
                          "arn:aws:cognito-idp:us-east-1:515554424717:userpool/us-east-1_7uRkF0Axn"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                              "/*"
                            ]
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:BatchGetItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem",
                          "dynamodb:BatchWriteItem"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:515554424717:table/efcms-dev",
                          "arn:aws:dynamodb:us-east-1:515554424717:table/efcms-dev/index/*",
                          "arn:aws:dynamodb:us-east-1:515554424717:table/efcms-dev",
                          "arn:aws:dynamodb:us-east-1:515554424717:table/efcms-dev/index/*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "ef-cms-users",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getUser",
              "Handler": "web-api/src/usersHandlers.getUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetUserLambdaVersionMXvjggOi6AJw2AgQDY3cP7J3wcZMg8zx81PdaCxUE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetInternalUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getInternalUsers",
              "Handler": "web-api/src/usersHandlers.getInternalUsersLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetInternalUsersLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetInternalUsersLambdaVersionOZzgnwmT3pa6kEXyzyVF5lwMHaoNeo95A2AoTUycVI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetInternalUsersLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-createUser",
              "Handler": "web-api/src/usersHandlers.createUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "CreateUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateUserLambdaVersion9cnJi5pBnSFyfsQEVDpb71jxDVaQ3G8z6V9U5WpMx6I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetCasesByUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getCasesByUser",
              "Handler": "web-api/src/usersHandlers.getCasesByUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetCasesByUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetCasesByUserLambdaVersionBoSVYL9ZJ5im6XHRouaOzoHQSiGF7jib1f9xJDsranc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCasesByUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "VerifyCaseForUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-verifyCaseForUser",
              "Handler": "web-api/src/usersHandlers.verifyCaseForUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "VerifyCaseForUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "VerifyCaseForUserLambdaVersiontZxrvEUfmMcjF3fG5YZBFcQv5HlADpKVgrFLMmc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyCaseForUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "VerifyPendingCaseForUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-verifyPendingCaseForUser",
              "Handler": "web-api/src/usersHandlers.verifyPendingCaseForUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "VerifyPendingCaseForUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "VerifyPendingCaseForUserLambdaVersionFjwV2vIrH2OCWvsZmsTgN3pYwwzc9GwkL4qhdn5wYk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyPendingCaseForUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "PractitionerCaseAssociationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-practitionerCaseAssociation",
              "Handler": "web-api/src/usersHandlers.practitionerCaseAssociationLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "PractitionerCaseAssociationLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "PractitionerCaseAssociationLambdaVersion82R2WZT1iErl6t7lUMBonAPHDL2cUVapWvHHLK8DrI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PractitionerCaseAssociationLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "PractitionerPendingCaseAssociationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-practitionerPendingCaseAssociation",
              "Handler": "web-api/src/usersHandlers.practitionerPendingCaseAssociationLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "PractitionerPendingCaseAssociationLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "PractitionerPendingCaseAssociationLambdaVersiona4KMuzAXuBUf0hWKXf20FpsnnOo7rhkSR8D4MQ6bLq0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PractitionerPendingCaseAssociationLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetInboxMessagesForUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getInboxMessagesForUser",
              "Handler": "web-api/src/usersHandlers.getInboxMessagesForUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetInboxMessagesForUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetInboxMessagesForUserLambdaVersionXfgVyjanPSbk8t1LEBwFYEFZJIlj061W8cPI2jP0No": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetInboxMessagesForUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetSentMessagesForUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getSentMessagesForUser",
              "Handler": "web-api/src/usersHandlers.getSentMessagesForUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetSentMessagesForUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetSentMessagesForUserLambdaVersion5iCB7jiryvb7zjYJrYjLxRE9W6wdNwGFJ65hDl8WJw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSentMessagesForUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetDocumentQCInboxForUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getDocumentQCInboxForUser",
              "Handler": "web-api/src/usersHandlers.getDocumentQCInboxForUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetDocumentQCInboxForUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetDocumentQCInboxForUserLambdaVersion2X35lg4zD1HNRGlWmqyfkSsacGaVOp80T3jkuiDQxw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDocumentQCInboxForUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetDocumentQCBatchedForUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getDocumentQCBatchedForUser",
              "Handler": "web-api/src/usersHandlers.getDocumentQCBatchedForUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetDocumentQCBatchedForUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetDocumentQCBatchedForUserLambdaVersion0MWJhgcT3jYCOTksOe4qwkcWs9XYhG4pZ7gYU3tHoE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDocumentQCBatchedForUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetDocumentQCServedForUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getDocumentQCServedForUser",
              "Handler": "web-api/src/usersHandlers.getDocumentQCServedForUserLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetDocumentQCServedForUserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetDocumentQCServedForUserLambdaVersionFBVnMSZ3iEEhyFj7B107hJfQY1iVrfOMhfz9WHcxs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDocumentQCServedForUserLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "UpdateUserContactInformationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-updateUserContactInformation",
              "Handler": "web-api/src/usersHandlers.updateUserContactInformationLambda",
              "MemorySize": 3008,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 900,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:515554424717:layer:dev-puppeteer:474"
              ],
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "UpdateUserContactInformationLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "UpdateUserContactInformationLambdaVersionqt5iYWuGXj8j73n4nxemQKYXeWt5WVr1DgShg3Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserContactInformationLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetPractitionersBySearchKeyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getPractitionersBySearchKey",
              "Handler": "web-api/src/usersHandlers.getPractitionersBySearchKeyLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetPractitionersBySearchKeyLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetPractitionersBySearchKeyLambdaVersionp4hhbAb3ywLviCIdQBJh0AFCwg8wK8IFVztAvJZ2I8s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPractitionersBySearchKeyLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "GetRespondentsBySearchKeyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys",
                "S3Key": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z/ef-cms-users.zip"
              },
              "FunctionName": "ef-cms-users-dev-getRespondentsBySearchKey",
              "Handler": "web-api/src/usersHandlers.getRespondentsBySearchKeyLambda",
              "MemorySize": 768,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "S3_ENDPOINT": "s3.us-east-1.amazonaws.com",
                  "DOCUMENTS_BUCKET_NAME": "ustc-case-mgmt.flexion.us-documents-dev-us-east-1",
                  "DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_DYNAMODB_ENDPOINT": "dynamodb.us-east-1.amazonaws.com",
                  "MASTER_REGION": "us-east-1",
                  "STAGE": "dev",
                  "USER_POOL_ID": "us-east-1_7uRkF0Axn",
                  "NODE_ENV": "production",
                  "GS_LIB": "/opt/share/ghostscript/9.06/Resource/Init",
                  "CLAMAV_DEF_DIR": "/opt/var/lib/clamav"
                }
              },
              "TracingConfig": {
                "Mode": "Active"
              }
            },
            "DependsOn": [
              "GetRespondentsBySearchKeyLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetRespondentsBySearchKeyLambdaVersion366VDnKrYWwyfNLlNt5A8Tl3TpgXJZKUHRWyeb7UqQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRespondentsBySearchKeyLambdaFunction"
              },
              "CodeSha256": "+8bbcXLHZ0m2Uwxo68iR1dYao2BCbDnlBoFS6u+KA2w="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-ef-cms-users",
              "BinaryMediaTypes": [
                "application/pdf"
              ],
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceInternal": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "internal",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarCases": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVar"
              },
              "PathPart": "cases",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarCase": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVar"
              },
              "PathPart": "case",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarCaseCaseidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVarCase"
              },
              "PathPart": "{caseId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarCaseCaseidVarPending": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVarCaseCaseidVar"
              },
              "PathPart": "pending",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarMessages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVar"
              },
              "PathPart": "messages",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarMessagesInbox": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVarMessages"
              },
              "PathPart": "inbox",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarMessagesSent": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVarMessages"
              },
              "PathPart": "sent",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarDocumentDashqc": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVar"
              },
              "PathPart": "document-qc",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarDocumentDashqcInbox": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqc"
              },
              "PathPart": "inbox",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarDocumentDashqcBatched": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqc"
              },
              "PathPart": "batched",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarDocumentDashqcServed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqc"
              },
              "PathPart": "served",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarContactDashinfo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVar"
              },
              "PathPart": "contact-info",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePractitioners": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "practitioners",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePractitionersSearch": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePractitioners"
              },
              "PathPart": "search",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRespondents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "respondents",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRespondentsSearch": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRespondents"
              },
              "PathPart": "search",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodInternalOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceInternal"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarCasesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarCases"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarCaseCaseidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarCaseCaseidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarCaseCaseidVarPendingOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarCaseCaseidVarPending"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarMessagesInboxOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarMessagesInbox"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarMessagesSentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarMessagesSent"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarDocumentDashqcInboxOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqcInbox"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarDocumentDashqcBatchedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqcBatched"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarDocumentDashqcServedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqcServed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarContactDashinfoOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarContactDashinfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPractitionersSearchOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePractitionersSearch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRespondentsSearchOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRespondentsSearch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodInternalGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceInternal"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetInternalUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarCasesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarCases"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCasesByUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarCaseCaseidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarCaseCaseidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifyCaseForUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarCaseCaseidVarPendingGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarCaseCaseidVarPending"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifyPendingCaseForUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarCaseCaseidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarCaseCaseidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PractitionerCaseAssociationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarCaseCaseidVarPendingPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarCaseCaseidVarPending"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PractitionerPendingCaseAssociationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarMessagesInboxGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarMessagesInbox"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetInboxMessagesForUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarMessagesSentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarMessagesSent"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSentMessagesForUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarDocumentDashqcInboxGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqcInbox"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDocumentQCInboxForUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarDocumentDashqcBatchedGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqcBatched"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDocumentQCBatchedForUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarDocumentDashqcServedGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarDocumentDashqcServed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDocumentQCServedForUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarContactDashinfoPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarContactDashinfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserContactInformationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 401,
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 403,
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 404,
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 422,
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 500,
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 502,
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 504,
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ],
                "RequestParameters": {
                  "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                }
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 401
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 403
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 404
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 422
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 500
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 502
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 504
                }
              ]
            }
          },
          "ApiGatewayMethodPractitionersSearchGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePractitionersSearch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPractitionersBySearchKeyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodRespondentsSearchGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRespondentsSearch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRespondentsBySearchKeyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1567608243698": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "__unused_stage__"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodInternalOptions",
              "ApiGatewayMethodUseridVarCasesOptions",
              "ApiGatewayMethodUseridVarCaseCaseidVarOptions",
              "ApiGatewayMethodUseridVarCaseCaseidVarPendingOptions",
              "ApiGatewayMethodUseridVarMessagesInboxOptions",
              "ApiGatewayMethodUseridVarMessagesSentOptions",
              "ApiGatewayMethodUseridVarDocumentDashqcInboxOptions",
              "ApiGatewayMethodUseridVarDocumentDashqcBatchedOptions",
              "ApiGatewayMethodUseridVarDocumentDashqcServedOptions",
              "ApiGatewayMethodUseridVarContactDashinfoOptions",
              "ApiGatewayMethodPractitionersSearchOptions",
              "ApiGatewayMethodRespondentsSearchOptions",
              "ApiGatewayMethodGet",
              "ApiGatewayMethodInternalGet",
              "ApiGatewayMethodPost",
              "ApiGatewayMethodUseridVarCasesGet",
              "ApiGatewayMethodUseridVarCaseCaseidVarGet",
              "ApiGatewayMethodUseridVarCaseCaseidVarPendingGet",
              "ApiGatewayMethodUseridVarCaseCaseidVarPut",
              "ApiGatewayMethodUseridVarCaseCaseidVarPendingPut",
              "ApiGatewayMethodUseridVarMessagesInboxGet",
              "ApiGatewayMethodUseridVarMessagesSentGet",
              "ApiGatewayMethodUseridVarDocumentDashqcInboxGet",
              "ApiGatewayMethodUseridVarDocumentDashqcBatchedGet",
              "ApiGatewayMethodUseridVarDocumentDashqcServedGet",
              "ApiGatewayMethodUseridVarContactDashinfoPut",
              "ApiGatewayMethodPractitionersSearchGet",
              "ApiGatewayMethodRespondentsSearchGet"
            ]
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetInternalUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetInternalUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCasesByUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCasesByUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyCaseForUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyCaseForUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyPendingCaseForUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyPendingCaseForUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PractitionerCaseAssociationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PractitionerCaseAssociationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PractitionerPendingCaseAssociationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PractitionerPendingCaseAssociationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetInboxMessagesForUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetInboxMessagesForUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSentMessagesForUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSentMessagesForUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDocumentQCInboxForUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDocumentQCInboxForUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDocumentQCBatchedForUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDocumentQCBatchedForUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDocumentQCServedForUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDocumentQCServedForUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserContactInformationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserContactInformationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPractitionersBySearchKeyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPractitionersBySearchKeyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRespondentsBySearchKeyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRespondentsBySearchKeyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "Name": "CognitoUserPool",
              "Type": "COGNITO_USER_POOLS",
              "IdentitySource": "method.request.header.Authorization",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ProviderARNs": [
                "arn:aws:cognito-idp:us-east-1:515554424717:userpool/us-east-1_7uRkF0Axn"
              ]
            }
          },
          "ApiGatewayStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
              "DeploymentId": {
                "Ref": "ApiGatewayDeployment1567608243698"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev",
              "MethodSettings": [
                {
                  "DataTraceEnabled": true,
                  "HttpMethod": "*",
                  "LoggingLevel": "INFO",
                  "ResourcePath": "/*",
                  "MetricsEnabled": true
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "ustc-case-mgmt.flexion.us.efcms.dev.us-east-1.deploys"
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionMXvjggOi6AJw2AgQDY3cP7J3wcZMg8zx81PdaCxUE"
            }
          },
          "GetInternalUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetInternalUsersLambdaVersionOZzgnwmT3pa6kEXyzyVF5lwMHaoNeo95A2AoTUycVI"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersion9cnJi5pBnSFyfsQEVDpb71jxDVaQ3G8z6V9U5WpMx6I"
            }
          },
          "GetCasesByUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCasesByUserLambdaVersionBoSVYL9ZJ5im6XHRouaOzoHQSiGF7jib1f9xJDsranc"
            }
          },
          "VerifyCaseForUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyCaseForUserLambdaVersiontZxrvEUfmMcjF3fG5YZBFcQv5HlADpKVgrFLMmc"
            }
          },
          "VerifyPendingCaseForUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyPendingCaseForUserLambdaVersionFjwV2vIrH2OCWvsZmsTgN3pYwwzc9GwkL4qhdn5wYk"
            }
          },
          "PractitionerCaseAssociationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PractitionerCaseAssociationLambdaVersion82R2WZT1iErl6t7lUMBonAPHDL2cUVapWvHHLK8DrI"
            }
          },
          "PractitionerPendingCaseAssociationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PractitionerPendingCaseAssociationLambdaVersiona4KMuzAXuBUf0hWKXf20FpsnnOo7rhkSR8D4MQ6bLq0"
            }
          },
          "GetInboxMessagesForUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetInboxMessagesForUserLambdaVersionXfgVyjanPSbk8t1LEBwFYEFZJIlj061W8cPI2jP0No"
            }
          },
          "GetSentMessagesForUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSentMessagesForUserLambdaVersion5iCB7jiryvb7zjYJrYjLxRE9W6wdNwGFJ65hDl8WJw"
            }
          },
          "GetDocumentQCInboxForUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDocumentQCInboxForUserLambdaVersion2X35lg4zD1HNRGlWmqyfkSsacGaVOp80T3jkuiDQxw"
            }
          },
          "GetDocumentQCBatchedForUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDocumentQCBatchedForUserLambdaVersion0MWJhgcT3jYCOTksOe4qwkcWs9XYhG4pZ7gYU3tHoE"
            }
          },
          "GetDocumentQCServedForUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDocumentQCServedForUserLambdaVersionFBVnMSZ3iEEhyFj7B107hJfQY1iVrfOMhfz9WHcxs"
            }
          },
          "UpdateUserContactInformationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserContactInformationLambdaVersionqt5iYWuGXj8j73n4nxemQKYXeWt5WVr1DgShg3Y"
            }
          },
          "GetPractitionersBySearchKeyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPractitionersBySearchKeyLambdaVersionp4hhbAb3ywLviCIdQBJh0AFCwg8wK8IFVztAvJZ2I8s"
            }
          },
          "GetRespondentsBySearchKeyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRespondentsBySearchKeyLambdaVersion366VDnKrYWwyfNLlNt5A8Tl3TpgXJZKUHRWyeb7UqQ"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "prune": {
        "automatic": true,
        "number": 3
      },
      "serverless-offline": {
        "host": "0.0.0.0",
        "port": 3003
      },
      "alerts": {
        "stages": [
          "dev",
          "stg",
          "prod"
        ],
        "dashboards": true,
        "alarms": [
          "functionThrottles",
          "functionErrors",
          "functionInvocations",
          "functionDuration",
          "errorExceptions"
        ],
        "definitions": {
          "errorExceptions": {
            "description": "Internal Error Exception Alarm",
            "namespace": "AWS/Lambda",
            "metric": "Errors",
            "threshold": 1,
            "statistic": "Sum",
            "period": 60,
            "evaluationPeriods": 1,
            "comparisonOperator": "GreaterThanThreshold",
            "pattern": "ERROR"
          }
        },
        "topics": {
          "alarm": {
            "topic": "dev-cloudwatch-alerts",
            "notifications": [
              {
                "protocol": "email",
                "endpoint": "jsutton@flexion.us"
              }
            ]
          }
        }
      },
      "customDomain": {
        "domainName": "efcms-dev.ustc-case-mgmt.flexion.us",
        "basePath": "users",
        "endpointType": "regional",
        "certificateName": "efcms-dev.ustc-case-mgmt.flexion.us",
        "certificateRegion": "us-east-1",
        "stage": "dev",
        "createRoute53Record": false,
        "enabled": true
      },
      "splitStacks": {
        "perFunction": true,
        "perType": true
      },
      "stage": "dev",
      "region": "us-east-1",
      "vars": {
        "nodeEnv": "production"
      }
    },
    "plugins": [
      "serverless-domain-manager",
      "serverless-plugin-bind-deployment-id",
      "serverless-offline",
      "serverless-prune-plugin",
      "serverless-plugin-tracing",
      "serverless-latest-layer-version"
    ],
    "pluginsData": {},
    "functions": {
      "getUser": {
        "handler": "web-api/src/usersHandlers.getUserLambda",
        "events": [
          {
            "http": {
              "path": "",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "getInternalUsers": {
        "handler": "web-api/src/usersHandlers.getInternalUsersLambda",
        "events": [
          {
            "http": {
              "path": "internal",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getInternalUsers",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "createUser": {
        "handler": "web-api/src/usersHandlers.createUserLambda",
        "events": [
          {
            "http": {
              "path": "",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-createUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "getCasesByUser": {
        "handler": "web-api/src/usersHandlers.getCasesByUserLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/cases",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getCasesByUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "verifyCaseForUser": {
        "handler": "web-api/src/usersHandlers.verifyCaseForUserLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/case/{caseId}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-verifyCaseForUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "verifyPendingCaseForUser": {
        "handler": "web-api/src/usersHandlers.verifyPendingCaseForUserLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/case/{caseId}/pending",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-verifyPendingCaseForUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "practitionerCaseAssociation": {
        "handler": "web-api/src/usersHandlers.practitionerCaseAssociationLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/case/{caseId}",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-practitionerCaseAssociation",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "practitionerPendingCaseAssociation": {
        "handler": "web-api/src/usersHandlers.practitionerPendingCaseAssociationLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/case/{caseId}/pending",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-practitionerPendingCaseAssociation",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "getInboxMessagesForUser": {
        "handler": "web-api/src/usersHandlers.getInboxMessagesForUserLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/messages/inbox",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getInboxMessagesForUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "getSentMessagesForUser": {
        "handler": "web-api/src/usersHandlers.getSentMessagesForUserLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/messages/sent",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getSentMessagesForUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "getDocumentQCInboxForUser": {
        "handler": "web-api/src/usersHandlers.getDocumentQCInboxForUserLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/document-qc/inbox",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getDocumentQCInboxForUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "getDocumentQCBatchedForUser": {
        "handler": "web-api/src/usersHandlers.getDocumentQCBatchedForUserLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/document-qc/batched",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getDocumentQCBatchedForUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "getDocumentQCServedForUser": {
        "handler": "web-api/src/usersHandlers.getDocumentQCServedForUserLambda",
        "events": [
          {
            "http": {
              "path": "{userId}/document-qc/served",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getDocumentQCServedForUser",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "updateUserContactInformation": {
        "runtime": "nodejs8.10",
        "handler": "web-api/src/usersHandlers.updateUserContactInformationLambda",
        "layers": [
          "arn:aws:lambda:us-east-1:515554424717:layer:dev-puppeteer:474"
        ],
        "memorySize": 3008,
        "timeout": 900,
        "events": [
          {
            "http": {
              "path": "{userId}/contact-info",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "async": true,
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS",
              "request": {
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                  },
                  "401": {
                    "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                  },
                  "403": {
                    "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                  },
                  "404": {
                    "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                  },
                  "422": {
                    "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                  },
                  "500": {
                    "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                  },
                  "502": {
                    "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                  },
                  "504": {
                    "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                  }
                }
              }
            }
          }
        ],
        "name": "ef-cms-users-dev-updateUserContactInformation",
        "package": {},
        "memory": 3008,
        "vpc": {}
      },
      "getPractitionersBySearchKey": {
        "handler": "web-api/src/usersHandlers.getPractitionersBySearchKeyLambda",
        "events": [
          {
            "http": {
              "path": "practitioners/search",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getPractitionersBySearchKey",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "getRespondentsBySearchKey": {
        "handler": "web-api/src/usersHandlers.getRespondentsBySearchKeyLambda",
        "events": [
          {
            "http": {
              "path": "respondents/search",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ef-cms-users-dev-getRespondentsBySearchKey",
        "package": {},
        "memory": 768,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "ApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "Name": "CognitoUserPool",
            "Type": "COGNITO_USER_POOLS",
            "IdentitySource": "method.request.header.Authorization",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ProviderARNs": [
              "arn:aws:cognito-idp:us-east-1:515554424717:userpool/us-east-1_7uRkF0Axn"
            ]
          }
        },
        "ApiGatewayStage": {
          "Type": "AWS::ApiGateway::Stage",
          "Properties": {
            "DeploymentId": {
              "Ref": "ApiGatewayDeployment1567608243698"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev",
            "MethodSettings": [
              {
                "DataTraceEnabled": true,
                "HttpMethod": "*",
                "LoggingLevel": "INFO",
                "ResourcePath": "/*",
                "MetricsEnabled": true
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless-users.yml",
    "layers": {},
    "artifact": "/Users/cseibert/Workspace/ef-cms/.serverless/ef-cms-users.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/ef-cms-users/dev/1567608341197-2019-09-04T14:45:41.197Z",
    "artifact": "ef-cms-users.zip"
  }
}