/* eslint-disable prefer-destructuring */
import {
  AuthFlowType,
  ChallengeNameType,
  CognitoIdentityProvider,
} from '@aws-sdk/client-cognito-identity-provider';
import { ROLES } from '@shared/business/entities/EntityConstants';
import { environment } from '@web-api/environment';
import axios from 'axios';

describe('irsUserPool', () => {
  let irsClientId, irsUserPoolId: string;

  const userName = 'ci_test_irs_super_user@example.com';
  const cognito = new CognitoIdentityProvider({
    maxAttempts: 3,
    region: 'us-east-1',
  });

  beforeAll(async () => {
    const result = await getIrsCognitoInfo({ cognito });
    irsClientId = result.irsClientId;
    irsUserPoolId = result.irsUserPoolId;
  });

  afterAll(async () => {
    // Delete USER
    try {
      await cognito.adminDeleteUser({
        UserPoolId: irsUserPoolId,
        Username: userName,
      });
      // eslint-disable-next-line no-empty
    } catch (e) {}
  });
  it('should be able to use an id token generated by the irs user pool to authenticate and get a reconciliation report', async () => {
    // Create User in IRS POOL
    const password = environment.defaultAccountPass;

    await cognito.adminCreateUser({
      TemporaryPassword: password,
      UserAttributes: [
        {
          Name: 'custom:role',
          Value: ROLES.irsSuperuser,
        },
        {
          Name: 'email',
          Value: userName,
        },
        {
          Name: 'email_verified',
          Value: 'true',
        },
      ],
      UserPoolId: irsUserPoolId,
      Username: userName,
    });
    await cognito.adminSetUserPassword({
      Password: password,
      Permanent: true,
      UserPoolId: irsUserPoolId,
      Username: userName,
    });

    const initiateAuthResult = await cognito.adminInitiateAuth({
      AuthFlow: AuthFlowType.ADMIN_USER_PASSWORD_AUTH,
      AuthParameters: {
        PASSWORD: password,
        USERNAME: userName,
      },
      ClientId: irsClientId,
      UserPoolId: irsUserPoolId,
    });
    console.log('initiateAuthResult', initiateAuthResult);

    const associateResult = await cognito.associateSoftwareToken({
      Session: initiateAuthResult.Session,
    });

    console.log('associateResult: ', associateResult);

    const verifyTokenResult = await cognito.verifySoftwareToken({
      Session: associateResult.Session,
      UserCode: associateResult.SecretCode,
    });
    console.log('verifyTokenResult: ', verifyTokenResult);

    const challengeResponse = await cognito.respondToAuthChallenge({
      ChallengeName: ChallengeNameType.MFA_SETUP,
      ChallengeResponses: {
        USERNAME: userName,
      },
      ClientId: irsClientId,
      Session: verifyTokenResult.Session,
    });
    console.log('challengeResponse: ', challengeResponse);

    if (!initiateAuthResult.AuthenticationResult?.IdToken) {
      throw new Error('An ID token was not generated for the IRS Superuser.');
    }

    // Use ID TOKEN to hit API
    const url = `https://api-${process.env.DEPLOYING_COLOR}.${environment.stage}.${environment.efcmsDomain}/v2/reconciliation-report/today`;
    const response = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${initiateAuthResult.AuthenticationResult.IdToken}`,
      },
    });

    // Verify we get a 200
    expect(response.status).toEqual(200);
  });
});

async function getIrsCognitoInfo({
  cognito,
}: {
  cognito: CognitoIdentityProvider;
}): Promise<{ irsUserPoolId: string; irsClientId: string }> {
  const results = await cognito.listUserPools({
    MaxResults: 50,
  });
  const irsUserPoolId = results?.UserPools?.find(
    pool => pool.Name === `efcms-irs-${environment.stage}`,
  )?.Id;

  if (!irsUserPoolId) {
    throw new Error('Could not get userPoolId');
  }

  const userPoolClients = await cognito.listUserPoolClients({
    MaxResults: 20,
    UserPoolId: irsUserPoolId,
  });
  const irsClientId = userPoolClients?.UserPoolClients?.[0].ClientId;

  if (!irsClientId) {
    throw new Error(
      `Unable to find a client for the IRS Superuser pool: ${irsUserPoolId}`,
    );
  }

  return {
    irsClientId,
    irsUserPoolId,
  };
}
