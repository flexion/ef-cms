service: ef-cms-users-${opt:stageColor}
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom: ${file(./web-api/config/custom.yml):users}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  userPoolIrsId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment: ${file(./web-api/config/environment-variables.yml)}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/usersHandlers.js
  excludeDevDependencies: true

resources: ${file(./web-api/config/resources.yml)}

functions:
  getUser:
    handler: web-api/${self:provider.dir}/usersHandlers.getUserLambda
    events:
      - http:
          path: /
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  getUserById:
    handler: web-api/${self:provider.dir}/usersHandlers.getUserByIdLambda
    events:
      - http:
          path: /{userId}
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getInternalUsers:
    handler: web-api/${self:provider.dir}/usersHandlers.getInternalUsersLambda
    events:
      - http:
          path: /internal
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createUser:
    handler: web-api/${self:provider.dir}/usersHandlers.createUserLambda
    events:
      - http:
          path: /
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCasesByUser:
    handler: web-api/${self:provider.dir}/usersHandlers.getCasesByUserLambda
    events:
      - http:
          path: /{userId}/cases
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getConsolidatedCasesByUser:
    handler: web-api/${self:provider.dir}/usersHandlers.getConsolidatedCasesByUserLambda
    events:
      - http:
          path: /{userId}/cases-with-consolidation
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  verifyPendingCaseForUser:
    handler: web-api/${self:provider.dir}/usersHandlers.verifyPendingCaseForUserLambda
    events:
      - http:
          path: /{userId}/case/{caseId}/pending
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  privatePractitionerCaseAssociation:
    handler: web-api/${self:provider.dir}/usersHandlers.privatePractitionerCaseAssociationLambda
    events:
      - http:
          path: /{userId}/case/{caseId}
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  privatePractitionerPendingAssociation:
    handler: web-api/${self:provider.dir}/usersHandlers.privatePractitionerPendingCaseAssociationLambda
    events:
      - http:
          path: /{userId}/case/{caseId}/pending
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getInboxMessagesForUser:
    handler: web-api/${self:provider.dir}/usersHandlers.getInboxMessagesForUserLambda
    events:
      - http:
          path: /{userId}/messages/inbox
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getSentMessagesForUser:
    handler: web-api/${self:provider.dir}/usersHandlers.getSentMessagesForUserLambda
    events:
      - http:
          path: /{userId}/messages/sent
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentQCInboxForUser:
    handler: web-api/${self:provider.dir}/usersHandlers.getDocumentQCInboxForUserLambda
    events:
      - http:
          path: /{userId}/document-qc/inbox
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentQCServedForUser:
    handler: web-api/${self:provider.dir}/usersHandlers.getDocumentQCServedForUserLambda
    events:
      - http:
          path: /{userId}/document-qc/served
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateUserContactInformation:
    handler: web-api/${self:provider.dir}/usersHandlers.updateUserContactInformationLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{userId}/contact-info
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          async: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getPrivatePractitionersBySearchKey:
    handler: web-api/${self:provider.dir}/usersHandlers.getPrivatePractitionersBySearchKeyLambda
    events:
      - http:
          path: /privatePractitioners/search
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getIrsPractitionersBySearchKey:
    handler: web-api/${self:provider.dir}/usersHandlers.getIrsPractitionersBySearchKeyLambda
    events:
      - http:
          path: /irsPractitioners/search
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
