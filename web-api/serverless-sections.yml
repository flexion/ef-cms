service: ef-cms-sections-${opt:stageColor}
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom: ${file(./web-api/config/custom.yml):sections}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment: ${file(./web-api/config/environment-variables.yml)}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/sectionsHandlers.js

  excludeDevDependencies: true

resources: ${file(./web-api/config/resources.yml)}

functions:
  #done
  getInboxMessagesForSection:
    handler: web-api/${self:provider.dir}/sectionsHandlers.getInboxMessagesForSectionLambda
    events:
      - http:
          path: /{section}/messages/inbox
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  getSentMessagesForSection:
    handler: web-api/${self:provider.dir}/sectionsHandlers.getSentMessagesForSectionLambda
    events:
      - http:
          path: /{section}/messages/sent
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  getDocumentQCBatchedForSection:
    handler: web-api/${self:provider.dir}/sectionsHandlers.getDocumentQCBatchedForSectionLambda
    events:
      - http:
          path: /{section}/document-qc/batched
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  getDocumentQCServedForSection:
    handler: web-api/${self:provider.dir}/sectionsHandlers.getDocumentQCServedForSectionLambda
    events:
      - http:
          path: /{section}/document-qc/served
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  getUsersInSection:
    handler: web-api/${self:provider.dir}/sectionsHandlers.getUsersInSectionLambda
    events:
      - http:
          path: /{section}/users
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  #done
  getDocumentQCInboxForSection:
    handler: web-api/${self:provider.dir}/sectionsHandlers.getDocumentQCInboxForSectionLambda
    events:
      - http:
          path: /{section}/document-qc/inbox
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
