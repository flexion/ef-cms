service: ef-cms
plugins:
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-plugin-split-stacks
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-apigwy-binary

custom:
  prune:
    automatic: true
    number: 3

  serverless-offline:
    host: 0.0.0.0

  s3:
    host: 0.0.0.0
    port: 9000
    directory: ./storage/s3
    cors: cors-policy.xml

  dynamodb:
    start:
      inMemory: true
      migrate: true
      port: 8000
    seed:
      test:
        sources:
          - table: ${opt:efcmsTableName}
            sources:
              - ./storage/fixtures/seed/misc.json
              - ./storage/fixtures/seed/users.json
              - ./storage/fixtures/seed/101-19.json
              - ./storage/fixtures/seed/102-19.json
              - ./storage/fixtures/seed/103-19.json
              - ./storage/fixtures/seed/104-19.json
              - ./storage/fixtures/seed/105-19.json
              - ./storage/fixtures/seed/trial-sessions.json

  alerts:
    stages:
      - dev
      - stg
      - prod
    dashboards: true
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
      - errorExceptions
    definitions:
      errorExceptions:
        description: 'Internal Error Exception Alarm'
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'ERROR'
    topics:
      alarm:
        topic: ${self:provider.stage}-cloudwatch-alerts
        notifications:
          - protocol: email
            endpoint: jsutton@flexion.us

  customDomain:
    domainName: efcms-${self:provider.stage}.${opt:domain}
    basePath: ''
    endpointType: 'regional'
    certificateName: efcms-${self:provider.stage}.${opt:domain}
    certificateRegion: ${opt:region}
    stage: ${self:provider.stage}
    createRoute53Record: false
    enabled: true
  splitStacks:
    perFunction: true
    perType: false
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  vars: ${file(./config/${self:custom.stage}.yml)}

provider:
  name: aws
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs10.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  clamavDefDir: /opt/var/lib/clamav
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'

  environment:
    S3_ENDPOINT: ${self:custom.vars.s3Endpoint, self:provider.s3Endpoint}
    DOCUMENTS_BUCKET_NAME: ${opt:domain}-documents-${opt:stage}-us-east-1
    DYNAMODB_ENDPOINT: ${self:custom.vars.dynamodbEndpoint, self:provider.dynamodbEndpoint}
    MASTER_DYNAMODB_ENDPOINT: ${self:custom.vars.masterDynamodbEndpoint, self:provider.masterDynamodbEndpoint}
    MASTER_REGION: ${self:custom.vars.masterRegion, self:provider.masterRegion}
    STAGE: ${self:custom.stage}
    USER_POOL_ID: ${opt:userPoolId, self:provider.userPoolId}
    NODE_ENV: ${self:custom.vars.nodeEnv}
    GS_LIB: /opt/share/ghostscript/9.06/Resource/Init
    CLAMAV_DEF_DIR: ${self:custom.vars.clamavDefDir, self:provider.clamavDefDir}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - arn:aws:lambda:${opt:region}:${opt:accountId}:function:${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: 'Allow'
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminGetUser
      Resource:
        - arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/${self:provider.environment.USER_POOL_ID}
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - ${self:provider.environment.DOCUMENTS_BUCKET_NAME}
            - '/*'
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - arn:aws:dynamodb:${opt:region}:${opt:accountId}:table/${opt:efcmsTableName}
        - arn:aws:dynamodb:${opt:region}:${opt:accountId}:table/${opt:efcmsTableName}/index/*
        - arn:aws:dynamodb:${self:provider.environment.MASTER_REGION}:${opt:accountId}:table/${opt:efcmsTableName}
        - arn:aws:dynamodb:${self:provider.environment.MASTER_REGION}:${opt:accountId}:table/${opt:efcmsTableName}/index/*

package:
  exclude:
    - storage/**
    - coverage/**
    - terraform/**
    - cognito/**
    - node_modules/**
    - .cache/**
    - .dynamodb/**
    - .nyc_output/**
    - dist/**
    - src/handlers.js.map
    - runtimes/**

  excludeDevDependencies: true

resources:
  Resources:
    #####
    # This Authorizer is used for validating the JWT token before invoking the lambda
    #####
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/${self:provider.environment.USER_POOL_ID}

    #####
    # Begin Stage for API Gateway Logging
    #####
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage}
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: '/*'
            MetricsEnabled: true

functions:
  createDocument:
    handler: src/handlers.createDocumentLambda
    events:
      - http:
          path: v1/cases/{caseId}/documents
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getUploadPolicy:
    handler: src/handlers.getUploadPolicyLambda
    events:
      - http:
          path: v1/documents/upload-policy
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentDownloadUrl:
    handler: src/handlers.getDocumentDownloadUrlLambda
    events:
      - http:
          path: v1/documents/{documentId}/document-download-url
          method: get
          cors: true

  setWorkItemAsRead:
    handler: src/handlers.setWorkItemAsReadLambda
    events:
      - http:
          path: v1/work-items/{workItemId}/read
          method: post
          cors: true

  getDownloadPolicyUrl:
    handler: src/handlers.downloadPolicyUrlLambda
    events:
      - http:
          path: v1/documents/{documentId}/download-policy-url
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  addCoversheet:
    handler: src/handlers.addCoversheetLambda
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: v1/cases/{caseId}/documents/{documentId}/coversheet
          method: post
          cors: true
          # async: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  signDocument:
    handler: src/handlers.signDocumentLambda
    events:
      - http:
          path: v1/cases/{caseId}/documents/{documentId}/sign
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  sanitizePdf:
    handler: src/handlers.sanitizePdfLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-ghostscript:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: v1/documents/{documentId}/sanitize
          method: post
          cors: true
          # async: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCase:
    handler: src/handlers.updateCaseLambda
    events:
      - http:
          path: v1/cases/{caseId}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCaseTrialSortTags:
    handler: src/handlers.updateCaseTrialSortTagsLambda
    events:
      - http:
          path: v1/cases/{caseId}/update-case-trial-sort-tags
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  setCaseToReadyForTrial:
    handler: src/handlers.setCaseToReadyForTrialLambda
    events:
      - http:
          path: v1/cases/{caseId}/set-to-ready-for-trial
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  runBatchProcess:
    handler: src/handlers.runBatchProcessLambda
    events:
      - http:
          path: v1/runBatchProcess
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCase:
    handler: src/handlers.createCaseLambda
    events:
      - http:
          path: v1/cases
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCaseFromPaper:
    handler: src/handlers.createCaseFromPaperLambda
    events:
      - http:
          path: v1/cases/paper
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  fileExternalDocument:
    handler: src/handlers.fileExternalDocumentToCaseLambda
    events:
      - http:
          path: v1/cases/{caseId}/external-document
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCasesByUser:
    handler: src/handlers.getCasesByUserLambda
    events:
      - http:
          path: v1/users/{userId}/cases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  verifyCaseForUser:
    handler: src/handlers.verifyCaseForUserLambda
    events:
      - http:
          path: v1/users/{userId}/case/{caseId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  verifyPendingCaseForUser:
    handler: src/handlers.verifyPendingCaseForUserLambda
    events:
      - http:
          path: v1/users/{userId}/case/{caseId}/pending
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  practitionerCaseAssociation:
    handler: src/handlers.practitionerCaseAssociationLambda
    events:
      - http:
          path: v1/users/{userId}/case/{caseId}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  practitionerPendingCaseAssociation:
    handler: src/handlers.practitionerPendingCaseAssociationLambda
    events:
      - http:
          path: v1/users/{userId}/case/{caseId}/pending
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCase:
    handler: src/handlers.getCaseLambda
    events:
      - http:
          path: v1/cases/{caseId}
          method: get
          request:
            parameters:
              paths:
                caseId: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  sendToIRS:
    handler: src/handlers.sendPetitionToIRSHoldingQueueLambda
    events:
      - http:
          path: v1/cases/{caseId}/send-to-irs-holding-queue
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  recallFromIRS:
    handler: src/handlers.recallPetitionFromIRSHoldingQueueLambda
    events:
      - http:
          path: v1/cases/{caseId}/recall-from-irs-holding-queue
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  assignWorkItems:
    handler: src/handlers.assignWorkItemsLambda
    events:
      - http:
          path: v1/work-items
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getWorkItem:
    handler: src/handlers.getWorkItemLambda
    events:
      - http:
          path: v1/work-items/{workItemId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  forwardWorkItem:
    handler: src/handlers.forwardWorkItemLambda
    events:
      - http:
          path: v1/work-items/{workItemId}/assignee
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  completeWorkItem:
    handler: src/handlers.completeWorkItemLambda
    events:
      - http:
          path: v1/work-items/{workItemId}/complete
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createWorkItem:
    handler: src/handlers.createWorkItemLambda
    events:
      - http:
          path: v1/cases/{caseId}/documents/{documentId}/work-items
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getInboxMessagesForUser:
    handler: src/handlers.getInboxMessagesForUserLambda
    events:
      - http:
          path: v1/users/{userId}/messages/inbox
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getSentMessagesForUser:
    handler: src/handlers.getSentMessagesForUserLambda
    events:
      - http:
          path: v1/users/{userId}/messages/sent
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
              
  getInboxMessagesForSection:
    handler: src/handlers.getInboxMessagesForSectionLambda
    events:
      - http:
          path: v1/sections/{section}/messages/inbox
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getSentMessagesForSection:
    handler: src/handlers.getSentMessagesForSectionLambda
    events:
      - http:
          path: v1/sections/{section}/messages/sent
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentQCInboxForUser:
    handler: src/handlers.getDocumentQCInboxForUserLambda
    events:
      - http:
          path: v1/users/{userId}/document-qc/inbox
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            
  getDocumentQCBatchedForUser:
    handler: src/handlers.getDocumentQCBatchedForUserLambda
    events:
      - http:
          path: v1/users/{userId}/document-qc/batched
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentQCServedForUser:
    handler: src/handlers.getDocumentQCServedForUserLambda
    events:
      - http:
          path: v1/users/{userId}/document-qc/served
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentQCInboxForSection:
    handler: src/handlers.getDocumentQCInboxForSectionLambda
    events:
      - http:
          path: v1/sections/{section}/document-qc/inbox
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentQCBatchedForSection:
    handler: src/handlers.getDocumentQCBatchedForSectionLambda
    events:
      - http:
          path: v1/sections/{section}/document-qc/batched
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


  getDocumentQCServedForSection:
    handler: src/handlers.getDocumentQCServedForSectionLambda
    events:
      - http:
          path: v1/sections/{section}/document-qc/served
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getInternalUsers:
    handler: src/handlers.getInternalUsersLambda
    events:
      - http:
          path: v1/users/internal
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getUsersInSection:
    handler: src/handlers.getUsersInSectionLambda
    events:
      - http:
          path: v1/sections/{section}/users
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getNotifications:
    handler: src/handlers.getNotificationsLambda
    events:
      - http:
          path: v1/notifications
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createUser:
    handler: src/handlers.createUserLambda
    events:
      - http:
          path: v1/users
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  checkForReadyForTrialCases:
    handler: src/handlers.checkForReadyForTrialCases
    events:
      - schedule: cron(0 7 * * ? *)

  swagger:
    handler: src/handlers.swaggerLambda
    events:
      - http:
          path: v1/swagger
          method: get
          cors: true

  swaggerJson:
    handler: src/handlers.swaggerJsonLambda
    events:
      - http:
          path: v1/swagger.json
          method: get
          cors: true

  virusScan:
    handler: src/handlers.virusScanPdfLambda
    memorySize: 3008
    timeout: 900
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-clamav:latest
    events:
      - http:
          path: v1/documents/{documentId}/virus-scan
          method: post
          cors: true
          async: true

  validate:
    handler: src/handlers.validatePdfLambda
    events:
      - http:
          path: v1/documents/{documentId}/validate
          method: post
          cors: true
    alarms:
      - errorExceptions

  getTrialSessions:
    handler: src/handlers.getTrialSessionsLambda
    events:
      - http:
          path: v1/trial-sessions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createTrialSession:
    handler: src/handlers.createTrialSessionLambda
    events:
      - http:
          path: v1/trial-sessions
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getTrialSessionDetails:
    handler: src/handlers.getTrialSessionDetailsLambda
    events:
      - http:
          path: v1/trial-sessions/{trialSessionId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  setTrialSessionAsSwingSession:
    handler: src/handlers.setTrialSessionAsSwingSessionLambda
    events:
      - http:
          path: v1/trial-sessions/{trialSessionId}/set-swing-session
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getEligibleCasesForTrialSession:
    handler: src/handlers.getEligibleCasesForTrialSessionLambda
    events:
      - http:
          path: v1/trial-sessions/{trialSessionId}/eligible-cases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  setTrialSessionCalendar:
    handler: src/handlers.setTrialSessionCalendarLambda
    events:
      - http:
          path: v1/trial-sessions/{trialSessionId}/set-calendar
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCalendaredCasesForTrialSession:
    handler: src/handlers.getCalendaredCasesForTrialSessionLambda
    events:
      - http:
          path: v1/trial-sessions/{trialSessionId}/get-calendared-cases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCourtIssuedOrderPdfFromHtml:
    runtime: nodejs8.10
    handler: src/handlers.createCourtIssuedOrderPdfFromHtmlLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: v1/court-issued-order
          method: post
          cors: true
          contentHandling: CONVERT_TO_BINARY
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
