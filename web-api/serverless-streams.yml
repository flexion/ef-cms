service: ef-cms-streams
plugins:
  - serverless-offline-dynamodb-streams
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom: ${file(./web-api/config/custom.yml):streams}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  elasticsearchEndpoint: ${opt:elasticsearch_endpoint}
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment: ${file(./web-api/config/environment-variables.yml)}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/streamsHandlers.js

  excludeDevDependencies: true

functions:
  processStreamRecords:
    handler: web-api/${self:provider.dir}/streamsHandlers.processStreamRecordsLambda
    events:
      - stream:
          type: dynamodb
          arn: ${opt:dynamo_stream_arn}
          batchSize: 100
          startingPosition: TRIM_HORIZON

  reprocessFailedRecords:
    handler: web-api/${self:provider.dir}/streamsHandlers.reprocessFailedRecordsLambda
    events:
      - schedule: cron(0 6 * * ? *)
