service: ef-cms-cases-${opt:stageColor}
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom: ${file(./web-api/config/custom.yml):cases}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  elasticsearchEndpoint: ${opt:elasticsearch_endpoint}
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment: ${file(./web-api/config/environment-variables.yml)}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/casesHandlers.js
  excludeDevDependencies: true

resources: ${file(./web-api/config/resources.yml)}

functions:
  saveCaseDetailInternalEdit:
    handler: web-api/${self:provider.dir}/casesHandlers.saveCaseDetailInternalEditLambda
    events:
      - http:
          path: /{caseId}
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  removeCasePendingItem:
    handler: web-api/${self:provider.dir}/casesHandlers.removeCasePendingItemLambda
    events:
      - http:
          path: /{caseId}/remove-pending/{documentId}
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCase:
    handler: web-api/${self:provider.dir}/casesHandlers.createCaseLambda
    events:
      - http:
          path: /
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCaseFromPaper:
    handler: web-api/${self:provider.dir}/casesHandlers.createCaseFromPaperLambda
    events:
      - http:
          path: /paper
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCase:
    handler: web-api/${self:provider.dir}/casesHandlers.getCaseLambda
    events:
      - http:
          path: /{caseId}
          method: get
          request:
            parameters:
              paths:
                caseId: true
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  getOpenConsolidatedCases:
    handler: web-api/${self:provider.dir}/casesHandlers.getOpenConsolidatedCasesLambda
    events:
      - http:
          path: /open
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  getClosedCases:
    handler: web-api/${self:provider.dir}/casesHandlers.getClosedCasesLambda
    events:
      - http:
          path: /closed
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  caseAdvancedSearch:
    handler: web-api/${self:provider.dir}/casesHandlers.caseAdvancedSearchLambda
    events:
      - http:
          path: /search
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  getConsolidatedCasesByCase:
    handler: web-api/${self:provider.dir}/casesHandlers.getConsolidatedCasesByCaseLambda
    events:
      - http:
          path: /{caseId}/consolidated-cases
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  serveCaseToIrs:
    handler: web-api/${self:provider.dir}/casesHandlers.serveCaseToIrsLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{caseId}/serve-to-irs
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
