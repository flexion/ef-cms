service: ef-cms-case-docs-${opt:stageColor}
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom: ${file(./web-api/config/custom.yml):case-documents}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  elasticsearchEndpoint: ${opt:elasticsearch_endpoint}
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment: ${file(./web-api/config/environment-variables.yml)}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/caseDocumentsHandlers.js

  excludeDevDependencies: true

resources: ${file(./web-api/config/resources.yml)}

functions:
  serveCourtIssuedDocument:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.serveCourtIssuedDocumentLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{caseId}/{documentId}/serve-court-issued
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createWorkItem:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.createWorkItemLambda
    events:
      - http:
          path: /{caseId}/{documentId}/work-items
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  addCoversheet:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.addCoversheetLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{caseId}/{documentId}/coversheet
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          # async: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  signDocument:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.signDocumentLambda
    events:
      - http:
          path: /{caseId}/{documentId}/sign
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  archiveDraftDocument:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.archiveDraftDocumentLambda
    events:
      - http:
          path: /{caseId}/{documentId}
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  fileExternalDocument:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.fileExternalDocumentToCaseLambda
    events:
      - http:
          path: /{caseId}/external-document
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  fileExternalDocumentToConsolidated:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.fileExternalDocumentToConsolidatedCasesLambda
    events:
      - http:
          path: /consolidated/{leadCaseId}/external-document
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  fileDocketEntry:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.fileDocketEntryToCaseLambda
    events:
      - http:
          path: /{caseId}/docket-entry
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateDocketEntry:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.updateDocketEntryOnCaseLambda
    events:
      - http:
          path: /{caseId}/docket-entry
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateDocketEntryMeta:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.updateDocketEntryMetaLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{caseId}/docket-entry-meta
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  completeDocketEntryQC:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.completeDocketEntryQCLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    events:
      - http:
          path: /{caseId}/docket-entry-complete
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  fileCourtIssuedDocketEntry:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.fileCourtIssuedDocketEntryLambda
    events:
      - http:
          path: /{caseId}/court-issued-docket-entry
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCourtIssuedDocketEntry:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.updateCourtIssuedDocketEntryLambda
    events:
      - http:
          path: /{caseId}/court-issued-docket-entry
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  fileCourtIssuedOrder:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.fileCourtIssuedOrderToCaseLambda
    events:
      - http:
          path: /{caseId}/court-issued-order
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCourtIssuedOrder:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.updateCourtIssuedOrderToCaseLambda
    events:
      - http:
          path: /{caseId}/court-issued-orders/{documentId}
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDownloadPolicyUrl:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.downloadPolicyUrlLambda
    events:
      - http:
          path: /{caseId}/{documentId}/download-policy-url
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentDownloadUrl:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.getDocumentDownloadUrlLambda
    events:
      - http:
          path: /{caseId}/{documentId}/document-download-url
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true
            identitySource: method.request.querystring.token
            type: request

  orderAdvancedSearch:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.orderAdvancedSearchLambda
    events:
      - http:
          path: /order-search
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  opinionAdvancedSearch:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.opinionAdvancedSearchLambda
    events:
      - http:
          path: /opinion-search
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  fileCorrespondenceDocument:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.fileCorrespondenceDocumentLambda
    events:
      - http:
          path: /{caseId}/correspondence
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCorrespondenceDocument:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.updateCorrespondenceDocumentLambda
    events:
      - http:
          path: /{caseId}/correspondence/{documentId}
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteCorrespondenceDocument:
    handler: web-api/${self:provider.dir}/caseDocumentsHandlers.deleteCorrespondenceDocumentLambda
    events:
      - http:
          path: /{caseId}/correspondence/{documentId}
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
