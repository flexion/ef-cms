customDefault: &customDefault
  logForwarding:
    destinationARN: arn:aws:lambda:${opt:region}:${opt:accountId}:function:log_forwarder_${opt:stage}
    filterPattern: 'ERROR'

  jetpack:
    mode: npm
    lockfile: ../package-lock.json

  prune:
    automatic: true
    number: 3

  alerts:
    stages:
      - dev
      - stg
      - test
      - prod
    dashboards: true
    alarms:
      - errorExceptions
    definitions:
      errorExceptions:
        description: 'Internal Error Exception Alarm'
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'ERROR'
    topics:
      alarm:
        topic: arn:aws:sns:${opt:region}:${opt:accountId}:serverless-alerts-topic-${self:provider.stage}

  splitStacks:
    perFunction: true
    perType: true

  stage: ${opt:stage, 'dev'}

  region: ${opt:region, 'us-east-1'}

  vars: ${file(./config/${opt:stage, 'dev'}.yml)}

serverless-offline: &serverless-offline-default
  skipCacheInvalidation: ${opt:skipCacheInvalidation}
  host: 0.0.0.0

customDomainDefault: &customDomainDefault
  domainName: efcms-${self:provider.stage}.${opt:domain}
  endpointType: 'regional'
  certificateName: efcms-${self:provider.stage}.${opt:domain}
  certificateRegion: ${opt:region}
  stage: ${self:provider.stage}
  createRoute53Record: false
  enabled: true

api:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3001
  customDomain:
    <<: *customDomainDefault
    basePath: 'api'

cases:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3002
  customDomain:
    <<: *customDomainDefault
    basePath: 'cases'

users:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3003
  customDomain:
    <<: *customDomainDefault
    basePath: 'users'

documents:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3004
  customDomain:
    <<: *customDomainDefault
    basePath: 'documents'

work-items:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3005
  customDomain:
    <<: *customDomainDefault
    basePath: 'work-items'

sections:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3006
  customDomain:
    <<: *customDomainDefault
    basePath: 'sections'

trial-sessions:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3007
  customDomain:
    <<: *customDomainDefault
    basePath: 'trial-sessions'

case-documents:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3008
  customDomain:
    <<: *customDomainDefault
    basePath: 'case-documents'

case-deadlines:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3009
  customDomain:
    <<: *customDomainDefault
    basePath: 'case-deadlines'

case-notes:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3010
  customDomain:
    <<: *customDomainDefault
    basePath: 'case-notes'

notifications:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3020 # this port really isn't used, but needs to be unique to prevent address in use errors
    websocketPort: 3011
  customDomain:
    websocket:
      domainName: efcms-${self:provider.stage}-ws.${opt:domain}
      endpointType: 'regional'
      certificateName: efcms-${self:provider.stage}-ws.${opt:domain}
      certificateRegion: ${opt:region}
      stage: ${self:provider.stage}
      createRoute53Record: false
      enabled: true

streams:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3012
  serverless-offline-dynamodb-streams:
    apiVersion: '2013-12-02'
    endpoint: http://0.0.0.0:8000
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    readInterval: 500
  customDomain:
    <<: *customDomainDefault
    basePath: 'streams'

public-api:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3013
  customDomain:
    <<: *customDomainDefault
    basePath: 'public-api'

case-parties:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3014
  customDomain:
    <<: *customDomainDefault
    basePath: 'case-parties'

case-meta:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3015
  customDomain:
    <<: *customDomainDefault
    basePath: 'case-meta'

reports:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3016
  customDomain:
    <<: *customDomainDefault
    basePath: 'reports'

practitioners:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3017
  customDomain:
    <<: *customDomainDefault
    basePath: 'practitioners'

messages:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3018
  customDomain:
    <<: *customDomainDefault
    basePath: 'messages'

migrate:
  <<: *customDefault
  serverless-offline:
    <<: *serverless-offline-default
    port: 3030
  customDomain:
    <<: *customDomainDefault
    basePath: 'migrate'
