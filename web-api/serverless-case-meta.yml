service: ef-cms-case-meta-${opt:stageColor}
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom: ${file(./web-api/config/custom.yml):case-meta}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  elasticsearchEndpoint: ${opt:elasticsearch_endpoint}
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment: ${file(./web-api/config/environment-variables.yml)}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/caseMetaHandlers.js
  excludeDevDependencies: true

resources: ${file(./web-api/config/resources.yml)}

functions:
  #done
  updateCaseTrialSortTags:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.updateCaseTrialSortTagsLambda
    events:
      - http:
          path: /{caseId}/update-case-trial-sort-tags
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  blockCaseFromTrial:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.blockCaseFromTrialLambda
    events:
      - http:
          path: /{caseId}/block
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  unblockCaseFromTrial:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.unblockCaseFromTrialLambda
    events:
      - http:
          path: /{caseId}/block
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  prioritizeCase:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.prioritizeCaseLambda
    events:
      - http:
          path: /{caseId}/high-priority
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  unprioritizeCase:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.unprioritizeCaseLambda
    events:
      - http:
          path: /{caseId}/high-priority
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  updateCaseContext:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.updateCaseContextLambda
    events:
      - http:
          path: /{caseId}/case-context
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  addConsolidatedCase:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.addConsolidatedCaseLambda
    events:
      - http:
          path: /{caseId}/consolidate-case
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  removeConsolidatedCases:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.removeConsolidatedCasesLambda
    events:
      - http:
          path: /{caseId}/consolidate-case
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  updateQcCompleteForTrial:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.updateQcCompleteForTrialLambda
    events:
      - http:
          path: /{caseId}/qc-complete
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  sealCase:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.sealCaseLambda
    events:
      - http:
          path: /{caseId}/seal
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  updateOtherStatistics:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.updateOtherStatisticsLambda
    events:
      - http:
          path: /{caseId}/other-statistics
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  addDeficiencyStatistic:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.addDeficiencyStatisticLambda
    events:
      - http:
          path: /{caseId}/statistics
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  updateDeficiencyStatistic:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.updateDeficiencyStatisticLambda
    events:
      - http:
          path: /{caseId}/statistics/{statisticId}
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  #done
  deleteDeficiencyStatistic:
    handler: web-api/${self:provider.dir}/caseMetaHandlers.deleteDeficiencyStatisticLambda
    events:
      - http:
          path: /{caseId}/statistics/{statisticId}
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
