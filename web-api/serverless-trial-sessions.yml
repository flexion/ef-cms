service: ef-cms-trial-sessions-${opt:stageColor}
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom: ${file(./web-api/config/custom.yml):trial-sessions}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
      - 'application/zip'
  clamavDefDir: /opt/var/lib/clamav

  environment: ${file(./web-api/config/environment-variables.yml)}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/trialSessionsHandlers.js

  excludeDevDependencies: true

resources: ${file(./web-api/config/resources.yml)}

functions:
  getTrialSessions:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.getTrialSessionsLambda
    events:
      - http:
          path: /
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createTrialSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.createTrialSessionLambda
    events:
      - http:
          path: /
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateTrialSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.updateTrialSessionLambda
    events:
      - http:
          path: /
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getTrialSessionDetails:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.getTrialSessionDetailsLambda
    events:
      - http:
          path: /{trialSessionId}
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  setNoticesForCalendaredSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.setNoticesForCalendaredTrialSessionLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{trialSessionId}/generate-notices
          method: post
          async: true
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  setTrialSessionAsSwingSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.setTrialSessionAsSwingSessionLambda
    events:
      - http:
          path: /{trialSessionId}/set-swing-session
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getEligibleCasesForTrialSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.getEligibleCasesForTrialSessionLambda
    events:
      - http:
          path: /{trialSessionId}/eligible-cases
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  setTrialSessionCalendar:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.setTrialSessionCalendarLambda
    events:
      - http:
          path: /{trialSessionId}/set-calendar
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCalendaredCasesForSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.getCalendaredCasesForTrialSessionLambda
    events:
      - http:
          path: /{trialSessionId}/get-calendared-cases
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getTrialSessionWorkingCopy:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.getTrialSessionWorkingCopyLambda
    events:
      - http:
          path: /{trialSessionId}/working-copy
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateTrialSessionWorkingCopy:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.updateTrialSessionWorkingCopyLambda
    events:
      - http:
          path: /{trialSessionId}/working-copy
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  batchDownloadTrialSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.batchDownloadTrialSessionLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{trialSessionId}/batch-download
          method: get
          async: true
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  removeCaseFromTrial:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.removeCaseFromTrialLambda
    events:
      - http:
          path: /{trialSessionId}/remove-case/{caseId}
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  addCaseToTrialSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.addCaseToTrialSessionLambda
    events:
      - http:
          path: /{trialSessionId}/cases/{caseId}
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteTrialSession:
    handler: web-api/${self:provider.dir}/trialSessionsHandlers.deleteTrialSessionLambda
    events:
      - http:
          path: /{trialSessionId}
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
