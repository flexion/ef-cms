service: ef-cms-messages-${opt:stageColor}
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom: ${file(./web-api/config/custom.yml):messages}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  elasticsearchEndpoint: ${opt:elasticsearch_endpoint}
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment: ${file(./web-api/config/environment-variables.yml)}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/messagesHandlers.js
  excludeDevDependencies: true

resources: ${file(./web-api/config/resources.yml)}

functions:
  createCaseMessage:
    handler: web-api/${self:provider.dir}/messagesHandlers.createCaseMessageLambda
    events:
      - http:
          path: /
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCaseMessage:
    handler: web-api/${self:provider.dir}/messagesHandlers.getCaseMessageLambda
    events:
      - http:
          path: /{messageId}
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getInboxCaseMessagesForUser:
    handler: web-api/${self:provider.dir}/messagesHandlers.getInboxCaseMessagesForUserLambda
    events:
      - http:
          path: /inbox/{userId}
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getInboxCaseMessagesForSection:
    handler: web-api/${self:provider.dir}/messagesHandlers.getInboxCaseMessagesForSectionLambda
    events:
      - http:
          path: /inbox/section/{section}
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getOutboxCaseMessagesForUser:
    handler: web-api/${self:provider.dir}/messagesHandlers.getOutboxCaseMessagesForUserLambda
    events:
      - http:
          path: /outbox/{userId}
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getOutboxCaseMessagesForSection:
    handler: web-api/${self:provider.dir}/messagesHandlers.getOutboxCaseMessagesForSectionLambda
    events:
      - http:
          path: /outbox/section/{section}
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
