service: ef-cms-documents
plugins:
  # - serverless-plugin-split-stacks
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  # - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  # - serverless-apigwy-binary

custom:
  prune:
    automatic: true
    number: 3

  serverless-offline:
    host: 0.0.0.0
    port: 3004

  alerts:
    stages:
      - dev
      - stg
      - prod
    dashboards: true
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
      - errorExceptions
    definitions:
      errorExceptions:
        description: 'Internal Error Exception Alarm'
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'ERROR'
    topics:
      alarm:
        topic: ${self:provider.stage}-cloudwatch-alerts
        notifications:
          - protocol: email
            endpoint: jsutton@flexion.us

  customDomain:
    domainName: efcms-${self:provider.stage}.${opt:domain}
    basePath: 'documents'
    endpointType: 'regional'
    certificateName: efcms-${self:provider.stage}.${opt:domain}
    certificateRegion: ${opt:region}
    stage: ${self:provider.stage}
    createRoute53Record: false
    enabled: true
  splitStacks:
    perFunction: true
    perType: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  vars: ${file(./config/${self:custom.stage}.yml)}

provider:
  name: aws
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs10.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  clamavDefDir: /opt/var/lib/clamav
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'

  environment:
    S3_ENDPOINT: ${self:custom.vars.s3Endpoint, self:provider.s3Endpoint}
    DOCUMENTS_BUCKET_NAME: ${opt:domain}-documents-${opt:stage}-us-east-1
    DYNAMODB_ENDPOINT: ${self:custom.vars.dynamodbEndpoint, self:provider.dynamodbEndpoint}
    MASTER_DYNAMODB_ENDPOINT: ${self:custom.vars.masterDynamodbEndpoint, self:provider.masterDynamodbEndpoint}
    MASTER_REGION: ${self:custom.vars.masterRegion, self:provider.masterRegion}
    STAGE: ${self:custom.stage}
    USER_POOL_ID: ${opt:userPoolId, self:provider.userPoolId}
    NODE_ENV: ${self:custom.vars.nodeEnv}
    GS_LIB: /opt/share/ghostscript/9.06/Resource/Init
    CLAMAV_DEF_DIR: ${self:custom.vars.clamavDefDir, self:provider.clamavDefDir}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - arn:aws:lambda:${opt:region}:${opt:accountId}:function:${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: 'Allow'
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminGetUser
      Resource:
        - arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/${self:provider.environment.USER_POOL_ID}
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - ${self:provider.environment.DOCUMENTS_BUCKET_NAME}
            - '/*'
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - arn:aws:dynamodb:${opt:region}:${opt:accountId}:table/${opt:efcmsTableName}
        - arn:aws:dynamodb:${opt:region}:${opt:accountId}:table/${opt:efcmsTableName}/index/*
        - arn:aws:dynamodb:${self:provider.environment.MASTER_REGION}:${opt:accountId}:table/${opt:efcmsTableName}
        - arn:aws:dynamodb:${self:provider.environment.MASTER_REGION}:${opt:accountId}:table/${opt:efcmsTableName}/index/*

package:
  exclude:
    - ./**
  include:
    - web-api/src/documentsHandlers.js

  excludeDevDependencies: true

resources:
  Resources:
    #####
    # This Authorizer is used for validating the JWT token before invoking the lambda
    #####
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/${self:provider.environment.USER_POOL_ID}

    #####
    # Begin Stage for API Gateway Logging
    #####
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage}
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: '/*'
            MetricsEnabled: true

functions:
  getDownloadPolicyUrl:
    handler: web-api/src/documentsHandlers.downloadPolicyUrlLambda
    events:
      - http:
          path: /{documentId}/download-policy-url
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  sanitizePdf:
    handler: web-api/src/documentsHandlers.sanitizePdfLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-ghostscript:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{documentId}/sanitize
          method: post
          cors: true
          # async: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  virusScan:
    handler: web-api/src/documentsHandlers.virusScanPdfLambda
    memorySize: 3008
    timeout: 900
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-clamav:latest
    events:
      - http:
          path: /{documentId}/virus-scan
          method: post
          cors: true
          async: true

  validate:
    handler: web-api/src/documentsHandlers.validatePdfLambda
    events:
      - http:
          path: /{documentId}/validate
          method: post
          cors: true
    alarms:
      - errorExceptions

  getUploadPolicy:
    handler: web-api/src/documentsHandlers.getUploadPolicyLambda
    events:
      - http:
          path: /upload-policy
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentDownloadUrl:
    handler: web-api/src/documentsHandlers.getDocumentDownloadUrlLambda
    events:
      - http:
          path: /{documentId}/document-download-url
          method: get
          cors: true