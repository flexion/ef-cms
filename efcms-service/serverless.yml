service: ef-cms
plugins:
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  - serverless-aws-documentation
  - serverless-plugin-aws-alerts
  - serverless-offline
custom:

  prune:
    automatic: true
    number: 3
    
  serverless-offline:
    host: 0.0.0.0

  s3:
    host: 0.0.0.0
    port: 9000
    directory: ./storage/s3
    cors: cors-policy.xml

  dynamodb:
    start:
      inMemory: true
      migrate: true
      port: 8000
    seed:
      test:
        sources:
          - table: ${opt:efcmsTableName}
            sources:
              - ./storage/fixtures/efcms.json

  alerts:
    stages:
      - dev
      - stg
      - prod
    dashboards: true
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
  documentation:
    api:
      info:
        title: EF-CMS Documents API
        description: Documents API for U.S. Tax Court EF-CMS
        contact:
          url: https://www.ustaxcourt.gov
          email: webmaster@ustaxcourt.gov
        license:
          name: Creative Commons 0
          url: https://creativecommons.org/share-your-work/public-domain/cc0/
      tags:
        - name: ef-cms
          description: EF-CMS
        - name: documents
          description: rawDocument service
    summary: 'EF-CMS Documents API'
    version: '1'
    description: 'EF-CMS Documents API documented with OpenAPI specification'
    resources:
      - path: 'v1/documents'
        description: 'Path used for creating a rawDocument.'
      - path: 'v1/documents/{documentId}'
        description: 'Path used for retrieving rawDocument with a documentId.'
      - path: 'v1/documents/uploadPolicy'
        description: 'Path used for retrieving pre-signed policy url.'
      - path: 'v1/cases'
        description: 'Path used for creating a case.'
    models:
      - name: 'case'
        description: 'a case response'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            caseId:
              type: string
              description: id of case
            userId:
              type: string
              description: id of user who created the case
            createdAt:
              type: string
              description: date case created
            docketNumber:
              type: string
              description: the unique docket number associated with the case
            respondent:
              type: string
              description: the respondent who is associated with the case
            irsSendDate: 
              type: string
              description: the date the case was sent to the IRS
            payGovId:
              type: string
              description: the pay gov id generated from pay.gov
            payGovDate:
              type: string
              description: the date the pay gov id was updated
            status:
              type: string
              description: the status of the case
            petitioners:
              type: array
              items: 
                type: object
                properties:
                  userId:
                    type: string
            documents:
              type: array
              items:
                type: object
                properties:
                  documentId:
                    type: string
                  documentType:
                    type: string
                  workItems:
                    type: array
                    items:
                      type: object
              description: array of rawDocument ids and types associated with the case
            
      - name: 'document'
        description: 'a document response'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            documentId:
              type: string
              description: id of rawDocument
            documentType:
              type: string
              description: type of this document
            userId:
              type: string
              description: id of user who created the document
            filedBy: 
              type: boolean
              description: the user name who filed the document
            validated: 
              type: boolean
              description: if the document has been validated
            reviewDate:
              type: string
              description: the date the user reviewed the document
            reviewUser:
              type: string
              description: the user who reviewed the document
            status:
              type: string
              description: the status of the document
            servedDate:
              type: string
              description: date document served
            createdAt:
              type: string
              description: date document created
      - name: 'workItem'
        description: 'a workItem response'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            workItemId:
              type: string
              description: id of work item
            messages:
              type: array
              items:
                type: object
                properties:
                  messageId:
                    type: string
                  messageType:
                    type: string
              description: array of messages associated with the workitem
            sentBy:
              type: string
              description: the user or system function that generate or sent this original work item
            assigneeId:
              type: string
              description: id of user currently assigned the work item
            assigneeName:
              type: string
              description: the name of the user currently assigned the work item
            docketNumber:
              type: string
              description: date workItem created
            caseId:
              type: string
              description: the case id
            document: 
              type: object
              properties:
                documentId:
                  type: string
                documentType:
                  type: string
                createAt:
                  type: string
            createdAt:
              type: string
              description: date workItem created
            updatedAt:
              type: string
              description: date workItem created
      - name: 'policyUrl'
        description: 'a policy url response'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            url:
              type: string
              description: url
            fields:
              $ref: '{{model: fields}}'
      - name: 'fields'
        description: 'a policy url response'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            bucket:
              type: string
              description: The bucket name.
            X-Amz-Algorithm:
              type: string
              description: The algorithm.
            X-Amz-Credential:
              type: string
              description: The credential.
            X-Amz-Date:
              type: string
              description: The date.
            X-Amz-Security-Token:
              type: string
              description: The security token.
            Policy:
              type: string
              description: The policy.
            X-Amz-Signature:
              type: string
              description: The signature.
      - name: 'awsError'
        description: 'an aws internal server error, usually with status code 502 (bad gateway)'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      - name: 'unprocessableEntityError'
        description: 'a unprocessable entity error (422), due to a problem in the body or the id in the url'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            message:
              type: string
          required:
            - message

  customDomain:
    domainName: efcms-${self:provider.stage}.${opt:domain}
    basePath: ''
    endpointType: 'regional'
    certificateName: efcms-${self:provider.stage}.${opt:domain}
    certificateRegion: ${opt:region}
    stage: ${self:provider.stage}
    createRoute53Record: false
    enabled: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  vars: ${file(./config/${self:custom.stage}.yml)}

provider:
  name: aws
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs8.10
  memorySize: 128
  timeout: 10
  logRetentionInDays: 7
  s3Endpoint: s3.${opt:region}.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  masterRegion: us-east-1
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256

  environment:
    S3_ENDPOINT: ${self:custom.vars.s3Endpoint, self:provider.s3Endpoint}
    DOCUMENTS_BUCKET_NAME: ${opt:domain}-documents-${opt:stage}-${opt:region}
    DYNAMODB_ENDPOINT: ${self:custom.vars.dynamodbEndpoint, self:provider.dynamodbEndpoint}
    MASTER_DYNAMODB_ENDPOINT: ${self:custom.vars.masterDynamodbEndpoint, self:provider.masterDynamodbEndpoint}
    MASTER_REGION: ${self:custom.vars.masterRegion, self:provider.masterRegion}
    STAGE: ${self:custom.stage}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: DocumentsBucket
            - '/*'
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - arn:aws:dynamodb:${opt:region}:${opt:accountId}:table/${opt:efcmsTableName}
        - arn:aws:dynamodb:${opt:region}:${opt:accountId}:table/${opt:efcmsTableName}/index/*

package:
  exclude:
    - ./**
  include:
    - src/**
    - swagger.json
    - ./package.json
    - ./node_modules/**

  excludeDevDependencies: true

resources:
  Resources:
    #####
    # Begin S3
    #####
    DocumentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.DOCUMENTS_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - Authorization
              AllowedMethods:
                - GET
                - POST
              AllowedOrigins:
                - '*'
              MaxAge: 3000
        VersioningConfiguration:
          Status: Enabled

    #####
    # Begin Stage for API Gateway Logging
    #####
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage}
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: '/*'
            MetricsEnabled: true

functions:
  createDocument:
    handler: src/documents/createDocumentLambda.createDocument
    events:
      - http:
          path: v1/cases/{caseId}/documents
          method: post
          cors: true
          documentation:
            summary: create a new document inside of a case
            tags:
              - documents
            description: >
              Create a new document and attaches it to a case.  It will also create a generic work item.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'the document metadata'
                responseModels:
                  'application/json': 'document'

  getUploadPolicy:
    handler: src/documents/getUploadPolicyLambda.create
    events:
      - http:
          path: v1/documents/uploadPolicy
          method: get
          cors: true
          documentation:
            summary: create a pre-signed url for uploads
            tags:
              - documents
            description: >
              Create a pre-signed url for  document uploads to S3.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'pre-signed policy upload url'
                responseModels:
                  'application/json': 'policyUrl'

  getDocumentDownloadUrl:
    handler: src/documents/getDocumentDownloadUrl.get
    events:
      - http:
          path: v1/documents/{documentId}/documentDownloadUrl
          method: get
          cors: true
          documentation:
            summary: redirects to the s3 url for downloading a document
            tags:
              - documents
            description: >
              Create and redirects the user to a pre-signed url for document downloads from S3.
            methodResponses:
              - statusCode: '302'
                responseBody:
                  description: 'a redirect to the s3 presigned download url'
                responseModels:
                  'application/json': 'policyUrl'

  getDownloadPolicyUrl:
    handler: src/documents/downloadPolicyUrlLambda.get
    events:
      - http:
          path: v1/documents/{documentId}/downloadPolicyUrl
          method: get
          cors: true
          documentation:
            summary: create a pre-signed url for downloads
            tags:
              - documents
            description: >
              Create a pre-signed url for  document downloads from S3.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'pre-signed policy download url'
                responseModels:
                  'application/json': 'policyUrl'

  updateCase:
    handler: src/cases/updateCaseLambda.put
    events:
      - http:
          path: v1/cases/{caseId}
          method: put
          cors: true
          documentation:
            summary: update a case
            tags:
              - cases
            description: >
              Update a case.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'updated case'
                responseModels:
                  'application/json': case
              - statusCode: '422'
                responseModels:
                  'application/json': 'unprocessableEntityError'


  createCase:
    handler: src/cases/createCaseLambda.create
    events:
      - http:
          path: v1/cases
          method: post
          cors: true
          documentation:
            summary: create a case
            tags:
              - cases
            description: >
              Create a case.
            parameters:
              - name: documents
                in: body
                required: true
                description:  document metadata
                schema:
                  type: array
                  items:
                    $ref: documents
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'case'
                responseModels:
                  'application/json': case

  getCases:
    handler: src/cases/getCasesLambda.get
    events:
      - http:
          path: v1/cases
          method: get
          cors: true
          documentation:
            summary: get all cases for a user
            tags:
              - cases
            description: >
              Get all cases for a user.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'array of cases'
                responseModels:
                  'application/json': case

  getCase:
    handler: src/cases/getCaseLambda.get
    events:
      - http:
          path: v1/cases/{caseId}
          method: get
          request:
            parameters:
              paths:
                caseId: true
          cors: true
          documentation:
            summary: get a case by caseId
            tags:
              - cases
            description: >
              Get a case by caseId.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'a case'
                responseModels:
                  'application/json': case

  sendToIRS:
    handler: src/cases/sendPetitionToIRSLambda.post
    events:
      - http:
          path: v1/cases/{caseId}/irsPetitionPackage
          method: post
          cors: true
          documentation:
            summary: send a case package to the respondent
            tags:
              - cases
            description: >
              Send a packaged case to the respondent.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'updated case including send date'
                responseModels:
                  'application/json': case
              - statusCode: '422'
                responseModels:
                  'application/json': 'unprocessableEntityError'

  assignWorkItems:
    handler: src/workitems/assignWorkItemsLambda.assign
    events:
      - http:
          path: v1/workitems
          method: put
          cors: true
          documentation:
            summary: assigns an assigneId to a list of work item ids
            tags:
              - workitems
            description: >
              Get a workitem.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'workitem'
                responseModels:
                  'application/json': workItem

  getWorkItem:
    handler: src/workitems/getWorkItemLambda.get
    events:
      - http:
          path: v1/workitems/{workItemId}
          method: get
          cors: true
          documentation:
            summary: get a workitem by workItemId
            tags:
              - workitems
            description: >
              Get a workitem.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'workitem'
                responseModels:
                  'application/json': workItem

  updateWorkItem:
    handler: src/workitems/updateWorkItemLambda.put
    events:
      - http:
          path: v1/workitems/{workItemId}
          method: put
          cors: true
          documentation:
            summary: update a workitem by workItemId
            tags:
              - workitems
            description: >
              Update a workitem.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'workitem'
                responseModels:
                  'application/json': workItem

  getWorkItems:
    handler: src/workitems/getWorkItemsLambda.get
    events:
      - http:
          path: v1/workitems
          method: get
          cors: true
          documentation:
            summary: get all workitems for a user
            tags:
              - workitems
            description: >
              Get all workitems for a user.
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'array of workitems'
                responseModels:
                  'application/json': workItem

  swagger:
    handler: src/swagger/swaggerLambda.handler
    events:
      - http:
          path: v1/swagger
          method: get
          cors: true
