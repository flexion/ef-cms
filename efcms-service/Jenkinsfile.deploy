regions = ['us-east-1', 'us-west-1']

branchMap = [
  develop: 'dev',
  staging: 'stg',
  master: 'prod',
]

pipeline {
  agent any

  options {
    buildDiscarder(logRotator(daysToKeepStr: '3', artifactDaysToKeepStr: '3'))
    disableConcurrentBuilds()
  }

  stages {
    stage('Merge') {
      steps {
        script {
          if (env.branch_name != 'develop' && env.branch_name != 'staging' && env.branch_name != 'master' && env.target_sha1) {
            // todo: there is probably a better way to have Jenkins do this for us automatically
            sh 'git config user.name "EF-CMS Jenkins"'
            sh 'git config user.email "noop@example.com"'
            sh "git merge origin/${env.target_sha1}"
          }
        }
      }
    }
    stage('Init') {
      steps {
        script {
          dir('efcms-service') {
            sh "./docker-init.sh"
          }
        }
      }
    }
    stage('Terraform') {
      when {
        expression {
          shouldDeploy(env.branch_name)
        }
      }
      steps {
        script {
          def tasks = createTerraformTasks getTarget(env.branch_name)
          parallel tasks
        }
      }
    }
    stage('Serverless') {
      when {
        expression {
          shouldDeploy(env.branch_name)
        }
      }
      steps {
        script {
          def tasks = createServerlessTasks getTarget(env.branch_name)
          parallel tasks
        }
      }
    }
    stage('Setup Active-Active Route53 Regional Record') {
      when {
        expression {
          shouldDeploy(env.branch_name)
        }
      }
      steps {
        script {
          dir('efcms-service') {
            sh "./docker-route53.sh ${branchMap[env.branch_name]}"
          }
        }
      }
    }
    stage('Setup S3 Replication Pre Prod') {
      when {
        expression {
          shouldDeploy(env.branch_name)
        }
      }
      steps {
        script {
          dir('efcms-service') {
            sh "./docker-s3replication.sh ${branchMap[env.branch_name]}"
          }
        }
      }
    }
    stage('Setup Global Tables') {
      when {
        expression {
          shouldDeploy(env.branch_name)
        }
      }
      steps {
        script {
          dir('efcms-service') {
            sh "./docker-globaltables.sh ${branchMap[env.branch_name]} ${regions.join(',')}"
          }
        }
      }
    }
    stage('Setup Cognito UI Configuration') {
      when {
        expression {
          shouldDeploy(env.branch_name)
        }
      }
      steps {
        script {
          dir('efcms-service') {
            sh "./docker-cognito-customize.sh ${branchMap[env.branch_name]}"
          }
        }
      }
    }
    stage('Setup Cognito Default Users') {
      when {
        expression {
          shouldDeploy(env.branch_name)
        }
      }
      steps {
        script {
          withCredentials([string(credentialsId: 'USTC_ADMIN_PASS', variable: 'USTC_ADMIN_PASS')]) {
            dir('efcms-service') {
              sh "./docker-cognito-users.sh ${branchMap[env.branch_name]}"
            }
          }
        }
      }
    }
    stage('Smoke Tests') {
      when {
        expression {
          shouldDeploy(env.branch_name)
        }
      }
      steps {
        script {
          def tasks = createSmokeTestTasks getTarget(env.branch_name)
          parallel tasks
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}

def createTerraformTasks(targets) {
  def tasks = [:]
  targets.each { deploy ->
    def slsStage = deploy.env
    tasks["${slsStage}"] = {
      node() {
        stage("terraform ${slsStage}") {
          checkout scm
          dir('efcms-service') {
            sh "./docker-terraform.sh ${slsStage}"
          }
        }
      }
    }
  }
  return tasks
}

def createSmokeTestTasks(targets) {
  def tasks = [:]
  targets.each { deploy ->
    def slsStage = deploy.env
    deploy.regions.each { region ->
      tasks["${slsStage} - ${region}"] = {
        node() {
          stage("smoketest ${slsStage} - ${region}") {
            checkout scm
            dir('efcms-service') {
              sh "./docker-smoketests.sh ${slsStage} ${region}"
            }
          }
        }
      }
    }
  }
  return tasks
}

def createServerlessTasks(targets) {
  def deployTasks = [:]
  targets.each { deploy ->
    def slsStage = deploy.env
    deploy.regions.each { region ->
      deployTasks["${slsStage} - ${region}"] = {
        node() {
          stage("serverless ${slsStage} - ${region}") {
            checkout scm
            dir('efcms-service') {
              sh "./docker-serverless.sh ${slsStage} ${region}"
            }
          }
        }
      }
    }
  }
  return deployTasks
}

def shouldDeploy(branchName) {
  ['develop', 'staging', 'master'].contains(branchName) == true
}

def getTarget(branchName) {
  [
    [env: branchMap[branchName], regions: regions]
  ]
}