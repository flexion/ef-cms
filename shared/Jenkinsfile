
pipeline {
  agent any

  options {
    buildDiscarder(logRotator(daysToKeepStr: '3', artifactDaysToKeepStr: '3')) 
    disableConcurrentBuilds()
  }
  
  stages {
    stage('Merge') {
      steps {
        script {
          if (env.branch_name != 'develop' && env.branch_name != 'staging' && env.branch_name != 'master' && env.target_sha1) {
            // todo: there is probably a better way to have Jenkins do this for us automatically
            sh 'git config user.name "EF-CMS Jenkins"'
            sh 'git config user.email "noop@example.com"'
            sh "git merge origin/${env.target_sha1}"
          }
        }
      }
    }
    stage('Init') {
      steps {
        script {
          dir('shared') {
            sh "./docker-init.sh"
          }
        }
      }
    }
    stage('ShellCheck') {
      steps {
        script {
          dir('shared') {
            sh "./docker-shellcheck.sh"
          }
        }
      }
    }
    stage('Audit') {
      steps {
        script {
          dir('shared') {
            sh "./docker-audit.sh"
          }
        }
      }
    }
    stage('Lint') {
      steps {
        script {
          dir('shared') {
            sh "./docker-lint.sh"
          }
        }
      }
    }
    stage('Test') {
      steps {
        script {
          dir('shared') {
            def CONTAINER_NAME = "api-test-${BUILD_NUMBER}"
            sh "CONTAINER_NAME=$CONTAINER_NAME ./docker-test.sh"
          }
        }
      }
      post {
        success {
          dir('shared') {
            publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'coverage/lcov-report', reportFiles: 'index.html', reportName: 'Code Coverage Report', reportTitles: ''
          }
        }
      }
    }
    stage('SonarQube') {
      steps {
        script {
          withCredentials([string(credentialsId: 'SHARED_SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
            dir('shared') {
              sh "SONAR_KEY=${SHARED_SONAR_KEY} branch_name=${branch_name} SONAR_ORG=${SONAR_ORG} SONAR_TOKEN=${SONAR_TOKEN} ./docker-sonarqube.sh"
            }
          }
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}
