version: 2

jobs:
  # build-image:
  #   docker:
  #     - image: circleci/node:10.15.3
  #   steps:
  #     - run:
  #       name: Shellcheck
  #       command: |
  #         sudo apt-get install shellcheck
  #     - run:
  #         name: Ghostscript - Install
  #         command: |
  #           sudo apt-get update
  #           sudo apt-get install ghostscript
  #     - run:
  #         name: SonarQube - Install
  #         command: |
  #           wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip
  #           unzip sonar-scanner-cli-4.0.0.1744-linux.zip
  #           rm sonar-scanner-cli-4.0.0.1744-linux.zip
  #           mv sonar-scanner-4.0.0.1744-linux /tmp/sonar-scanner
  #     - setup_remote_docker

  build:
    docker:
      - image: circleci/node:10.15.3
    steps:
      - run:
          name: CHMOD
          command: chmod -R 777 ./
      - restore_cache:
          name: Source - Restoring Cache
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - save_cache:
          name: Source - Saving Cache
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'
      - restore_cache:
          name: NPM - Restoring Cache
          keys:
            - npm-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v1-{{ .Branch }}-
            - npm-v1-
      - run:
          name: NPM - Install
          command: npm i
      - save_cache:
          name: NPM - Save to Cache
          paths:
            - node_modules # location depends on npm version
          key: npm-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Lint
          command: npm run lint
      ### Shellcheck ###
      - run:
          name: Shellcheck
          command: |
            sudo apt-get install shellcheck && ./run-shellcheck.sh
      ### GhostScript ###
      - run:
          name: Ghostscript - Install
          command: |
            sudo apt-get update
            sudo apt-get install ghostscript
      - run:
          name: Shared - Test
          command: npm run test:shared
      ### SonarQube ###
      - restore_cache:
          name: SonarQube - Restoring Cache
          keys:
            - sonar-scanner-4.0.0-v0.0.2
      - run:
          name: Install SonarQube
          command: |
            if test ! -d /tmp/sonar-scanner; then
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip
                unzip sonar-scanner-cli-4.0.0.1744-linux.zip
                rm sonar-scanner-cli-4.0.0.1744-linux.zip
                mv sonar-scanner-4.0.0.1744-linux /tmp/sonar-scanner
            fi
      - save_cache:
          key: sonar-scanner-4.0.0-v0.0.2
          paths:
            - /tmp/sonar-scanner
      - run:
          name: Shared - SonarQube
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            /tmp/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey="${SHARED_SONAR_KEY}" \
            -Dsonar.branch.name="${CIRCLE_BRANCH}" \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectBaseDir="shared" \
            -Dproject.settings="shared/sonar-project.properties" \
            -Dsonar.login="${SHARED_SONAR_TOKEN}" \
            -Dsonar.host.url="https://sonarcloud.io"
      - run:
          name: Web API - Test
          command: npm run test:api
      - run:
          name: Web API - SonarQube
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            /tmp/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey="${API_SONAR_KEY}" \
            -Dsonar.branch.name="${CIRCLE_BRANCH}" \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectBaseDir="web-api" \
            -Dproject.settings="web-api/sonar-project.properties" \
            -Dsonar.login="${API_SONAR_TOKEN}" \
            -Dsonar.host.url="https://sonarcloud.io"
      - run:
          name: Install Java
          command: |
            sudo sh -c 'echo "deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main" > /etc/apt/sources.list.d/jessie-backports.list'
            sudo sed -i '/deb http:\/\/deb.debian.org\/debian jessie-updates main/d' /etc/apt/sources.list
            sudo apt-get -o Acquire::Check-Valid-Until=false update
            sudo apt-get install -t jessie-backports ca-certificates-java
            sudo apt-get install openjdk-8-jdk && update-alternatives --config java
      - run:
          name: Install ClamAV
          command: |
            sudo apt-get install clamav
            sudo freshclam
      - run:
          name: Install Deps
          command: |
            sudo apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
              libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
              libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 \
              libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \
              ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget \
              git bash openssh-client python python-dev python-pip python-setuptools ca-certificates groff less \
              unzip wget jq shellcheck ghostscript libgs-dev clamav
      - run:
          name: Web Client - Test
          command: |
            AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npm run start:api > /dev/null & 
            ./wait-until.sh http://localhost:3000/api/swagger 
            sleep 5
            npm run test:client
      - run:
          name: Web Client - SonarQube
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            /tmp/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey="${UI_SONAR_KEY}" \
            -Dsonar.branch.name="${CIRCLE_BRANCH}" \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectBaseDir="web-client" \
            -Dproject.settings="web-client/sonar-project.properties" \
            -Dsonar.login="${UI_SONAR_TOKEN}" \
            -Dsonar.host.url="https://sonarcloud.io"

  e2e:
    docker:
      - image: cypress/base:10.15.3
    steps:
      - restore_cache:
          name: Source - Restoring Cache
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - save_cache:
          name: Source - Saving Cache
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'
      - restore_cache:
          name: NPM - Restoring Cache
          keys:
            - npm-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v1-{{ .Branch }}-
            - npm-v1-
      - run:
          name: NPM - Install
          command: npm i
      - save_cache:
          name: NPM - Save to Cache
          paths:
            - node_modules # location depends on npm version
          key: npm-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install Java
          command: |
            sh -c 'echo "deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main" > /etc/apt/sources.list.d/jessie-backports.list'
            sed -i '/deb http:\/\/deb.debian.org\/debian jessie-updates main/d' /etc/apt/sources.list
            apt-get -o Acquire::Check-Valid-Until=false update
            apt-get -y install -t jessie-backports ca-certificates-java
            apt-get -y install openjdk-8-jdk && update-alternatives --config java
      - run:
          name: Pa11y
          command: |
            SLS_DEBUG=* AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npx run-p start:api:ci start:client:ci > /dev/null &
            ./wait-until-services.sh
            ./wait-until.sh http://localhost:3000/api/swagger 
            npm run test:pa11y
      # - run:
      #     name: Cypress
      #     command: docker run --rm -e SLS_DEBUG=* -e AWS_ACCESS_KEY_ID=noop -e AWS_SECRET_ACCESS_KEY=noop efcms /bin/sh -c '(npx run-p start:api:ci start:client:ci > /dev/null &) && ./wait-until-services.sh && ./wait-until.sh http://localhost:1234 && npm run cypress'

  deploy-ui:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: cd web-api/runtimes/clamav && ./build.sh && cd ../ghostscript && ./build.sh && cd ../puppeteer && ./build.sh && cd ../../.. && docker build -t efcms -f Dockerfile .
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: Setup Dynamsoft Keys
          command: echo "export DYNAMSOFT_PRODUCT_KEYS='$(./get-keys.sh $CIRCLE_BRANCH)'" >> $BASH_ENV
      - run:
          name: 'Deploy - Web Client - Terraform'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -e "DYNAMSOFT_S3_ZIP_PATH=${DYNAMSOFT_S3_ZIP_PATH}" -e "DYNAMSOFT_URL=${DYNAMSOFT_URL}"  -e "DYNAMSOFT_PRODUCT_KEYS=${DYNAMSOFT_PRODUCT_KEYS}" --rm efcms /bin/sh -c "cd web-client/terraform/main && ../bin/deploy-app.sh $ENV"
      - run:
          name: 'Deploy - Web Client - S3'
          command: docker run -e "DYNAMSOFT_URL_OVERRIDE=${DYNAMSOFT_URL_OVERRIDE}" -e "ENV=${ENV}" -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -e "COGNITO_SUFFIX=${COGNITO_SUFFIX}" -e "GIT_COMMIT=${CIRCLE_SHA1}" --rm efcms /bin/sh -c "./web-client/build-dist.sh $ENV && aws s3 sync dist s3://ui-${ENV}.${EFCMS_DOMAIN} --delete --cache-control no-cache && aws s3 sync dist s3://failover-ui-${ENV}.${EFCMS_DOMAIN} --delete --cache-control no-cache"
      - run:
          name: 'Deploy - Web API - Terraform'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "COGNITO_SUFFIX=${COGNITO_SUFFIX}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -e "SES_DMARC_EMAIL=${SES_DMARC_EMAIL}" --rm efcms /bin/sh -c "cd web-api/terraform/main && ../bin/deploy-app.sh ${ENV}"

  deploy-api-east:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: cd web-api/runtimes/clamav && ./build.sh && cd ../ghostscript && ./build.sh && cd ../puppeteer && ./build.sh && cd ../../.. && docker build -t efcms -f Dockerfile .
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Web API - Layers - Puppeteer - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-puppeteer.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Layers - Ghostscript - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-ghostscript.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Layers - ClamAV - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-clamav.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - API - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-api.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Cases - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-cases.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Users - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-users.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Documents - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-documents.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Work Items - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-work-items.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Sections - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-sections.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Trial Sessions - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-trial-sessions.sh ${ENV} us-east-1"

  deploy-api-west:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: cd web-api/runtimes/clamav && ./build.sh && cd ../ghostscript && ./build.sh && cd ../puppeteer && ./build.sh && cd ../../.. && docker build -t efcms -f Dockerfile .
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Web API - Layers - Puppeteer - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-puppeteer.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Layers - Ghostscript - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-ghostscript.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Layers - ClamAV - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-clamav.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - API - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-api.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Cases - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-cases.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Users - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-users.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Documents - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-documents.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Work Items - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-work-items.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Sections - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-sections.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Trial Sessions - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-trial-sessions.sh ${ENV} us-west-1"

  post-deploy:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build -t efcms -f Dockerfile .
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Web API - Route53'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "cd web-api && ./setup-regional-route53.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - S3 Replication'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "cd web-api && ./setup-s3-replication.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Global Tables'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && node setup-global-tables.js efcms-${ENV} us-east-1,us-west-1"
      - run:
          name: 'Deploy - Web API - Cognito Customize'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && ./setup-cognito-ui.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Cognito Create Users'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "USTC_ADMIN_PASS=${USTC_ADMIN_PASS}" --rm efcms /bin/sh -c "cd web-api && ./setup-cognito-users.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Smoke Tests - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && ./run-smoketests.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Smoke Tests - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && ./run-smoketests.sh ${ENV} us-west-1"

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - e2e
      - deploy-ui:
          requires:
            - build
            - e2e
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-api-east:
          requires:
            - build
            - e2e
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-api-west:
          requires:
            - build
            - e2e
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - post-deploy:
          requires:
            - deploy-ui
            - deploy-api-west
            - deploy-api-east
          filters:
            branches:
              only:
                - develop
                - staging
                - master
